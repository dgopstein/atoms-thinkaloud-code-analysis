{\rtf1\ansi\deff0\uc1\ansicpg1252\deftab720{\fonttbl{\f0\fnil\fcharset1 Arial;}{\f1\fnil\fcharset2 Wingdings;}{\f2\fnil\fcharset2 Symbol;}}{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue255;\red128\green0\blue128;\red128\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;\red0\green128\blue128;\red0\green0\blue128;\red255\green255\blue255;\red192\green192\blue192;\red128\green128\blue128;\red0\green0\blue0;}\wpprheadfoot1\paperw12240\paperh15840\margl1880\margr1880\margt1440\margb1440\headery720\footery720\ftnbj\sftnbj\sftnrstcont\nocolbal\sftnnar\saftnnar\fet0\endnhere\sectdefaultcl{\*\generator WPTools_7.270-PRM;}{\plain\fs26\cf0\cb0{\*\bkmkstart Section - Evaluation:43748&Admin%^m9bZG37hy-000¦}Interviewer:        00:00          Okay, cool. Um, also I just started the audio recording,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:04          Sure, no problem\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:04          So if you consent to audio recording, can you just say that\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:08          I consent to audio recording?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:10          Okay, great. Thank you. Alright, cool. So, um, read through the instructions.\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Subject:            00:15          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:16          Cool. So are you ready to begin?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:17          Yeah\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 45:43748&Admin%^Znw5kvcpt-000¦}{\*\bkmkstart Pointer Arithmetic Atom:43748&Admin%^br6XRiVSJ-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^HiSd5N7u5-000¦}{\*\bkmkstart Confidence - 4:43748&Admin%^cZO12fx0O-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^Y0HCFR0BG-000¦}Interviewer:        00:18          [Snippet 45] Great, thank you. Okay. So if you could please write the time as 11:01\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:38          All right. Um, \cf0\cb0 it's like a it's a int array containing four, two, seven, five. {\*\bkmkstart Pointer Arithmetic Atom:43545&Admin%^DdEBieQhu-000¦}{\*\bkmkstart Correct Semantics:43732&Admin%^vMtrBvPER-000¦}Um looks like we're taking a or declaring another pointer to that array and adding one, that's interesting. Um, I think that should be, I guess that's the address over the array as.{\*\bkmkend Correct Semantics:43732&Admin%^vMtrBvPER-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Incorrect Semantics:43732&Admin%^sqMf2o38D-000¦}{\*\bkmkstart Inferring Semantics from Reasoning:43732&Admin%^vs9Ny0QQL-000¦}{\*\bkmkstart Unsure:43732&Admin%^DGL1XBTX9-000¦}{\*\bkmkstart Guessing:43732&Admin%^xZHtg7Q83-000¦}{\*\bkmkstart Value Exists:43785&Admin%nAdq5wJ6ZC-000¦}I don't think you can add one to an array like that as there's just nothing{\*\bkmkend Value Exists:43785&Admin%nAdq5wJ6ZC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Multiple Possible Semantics:43732&Admin%^3NjX0ZFPl-000¦}There can be a length or an element, but I don't think that's how that works.{\*\bkmkend Multiple Possible Semantics:43732&Admin%^3NjX0ZFPl-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So I guess I will, and that, and then{\*\bkmkstart Questioning Program Validity:43785&Admin%0wMwO0zxea-000¦} this pointer to an int should be, if I were to guess that it's correct, is the size of the array.{\*\bkmkend Questioning Program Validity:43785&Admin%0wMwO0zxea-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Pointer Arithmetic Atom:43545&Admin%^DdEBieQhu-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So right now the array was instantiated at four and then the size should be uh five. So if you were to print the dereferenced V2, then be five. So program output is five?{\*\bkmkend Guessing:43732&Admin%^xZHtg7Q83-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43732&Admin%^DGL1XBTX9-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Inferring Semantics from Reasoning:43732&Admin%^vs9Ny0QQL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43732&Admin%^sqMf2o38D-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  Here? Is that where I wrote the program?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        02:26          I was thinking there if you just circle that. Okay. Yeah, that's fine.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            02:29          I'll just cross it out and then I think that's it?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        02:34          Okay, great. Um, and if you could write the time 11:03, um, and then down here, um your confidence about your answer.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            02:46          \cf0\cb0{\*\bkmkstart Amusement:43545&Admin%^qNQ4XhSRe-000¦}I'm going to go with four [laugh].{\*\bkmkend Amusement:43545&Admin%^qNQ4XhSRe-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        02:49          Cool. Okay. And could you explain why that confidence level?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            02:55          Um, \cf0\cb0{\*\bkmkstart Unsure:43545&Admin%^2kS85jsav-000¦}{\*\bkmkstart Pointer Arithmetic Atom:43545&Admin%^OzpdjawVa-000¦It seems that the confusion is less about how to add pointers than about what a pointer to a array really means. Perhaps that's the underlying confusion we measured? }I wasn't sure that you could add to an array directly like that.{\*\bkmkend Pointer Arithmetic Atom:43545&Admin%^OzpdjawVa-000¦It seems that the confusion is less about how to add pointers than about what a pointer to a array really means. Perhaps that's the underlying confusion we measured? }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43545&Admin%^2kS85jsav-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:00          \cf0\cb0{\*\bkmkstart Mental Model:43732&Admin%^bCj4fFjXi-000¦}{\*\bkmkstart Multiple Possible Semantics:43732&Admin%^prddmgmex-000¦}Um, so assuming that the code was relatively simple, I just assumed that you could index something in the array and it was either going to add an element or increase the length of the array. So I went with length.{\*\bkmkend Multiple Possible Semantics:43732&Admin%^prddmgmex-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Mental Model:43732&Admin%^bCj4fFjXi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:17          Okay, cool.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:20          Yes.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:21          Okay. Awesome. Thank you. So we can move on to the next one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:24          Sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:26          If you could write the time again, 11:04?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:30          Sure.\par
\plain\fs26\cf0\cb0{\*\bkmkend Confusingness - Atom:43748&Admin%^Y0HCFR0BG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 4:43748&Admin%^cZO12fx0O-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Wrong:43748&Admin%^HiSd5N7u5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Pointer Arithmetic Atom:43748&Admin%^br6XRiVSJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 45:43748&Admin%^Znw5kvcpt-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 46:43748&Admin%^IAHAQQTpC-000¦}{\*\bkmkstart Confusingness - Transformation:43748&Admin%^lbA6E0Oga-000¦}{\*\bkmkstart Pointer Arithmetic Transformation:43748&Admin%^F7I5J4URN-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^lYyO0augh-000¦}{\*\bkmkstart Answer - Right:43769&Admin%AuQlJ2QVCF-000¦}Subject:            03:39          {\*\bkmkstart Similar To:43732&Admin%^3EeC1XMTx-000¦}[Snippet 46] Another array.{\*\bkmkend Similar To:43732&Admin%^3EeC1XMTx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Pointer Arithmetic Transformation:43545&Admin%^AoCEnAz7S-000¦}{\*\bkmkstart Correct Semantics:43545&Admin%^4UqHfdoOY-000¦}This time the pointer is an address of an element.{\*\bkmkend Correct Semantics:43545&Admin%^4UqHfdoOY-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Unsure:43545&Admin%^S1bMGR2FG-000¦}The second element in the array or I guess the first if.{\*\bkmkend Unsure:43545&Admin%^S1bMGR2FG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Sure:43545&Admin%^Zeq0axQaV-000¦}So the array contains three, one, four, and six. {\*\bkmkstart Non-standard terminology:43545&Admin%^5qSS1JA8j-000¦Reference vs pointer }Then we're passing a reference to the element one in that array.{\*\bkmkend Non-standard terminology:43545&Admin%^5qSS1JA8j-000¦Reference vs pointer }\li0\fi0\ri0\sb0\sa0\ql\vertalt  So V2 will contain a reference to that element and then when you try and print out the dereferenced V2 it'll print out 1{\*\bkmkend Pointer Arithmetic Transformation:43545&Admin%^AoCEnAz7S-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And then 11:05. I think I'm positive about that one.{\*\bkmkend Sure:43545&Admin%^Zeq0axQaV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        04:28          Great. Um, can you explain why uh, you're positive about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            04:34          {\*\bkmkstart Notices Transformation Correctly:43732&Admin%^brmKiZZ8p-000¦}\cf0\cb0{\*\bkmkstart Previously Seen:43732&Admin%^jryBAiA8H-000¦}Uh, this is a more familiar, accessing of an array that I'm used to in C I think just by element {\*\bkmkstart Non-standard terminology:43545&Admin%^L9sQuMo6O-000¦Technically the previous example had addition but not incrementation }as opposed to the incrementation{\*\bkmkend Non-standard terminology:43545&Admin%^L9sQuMo6O-000¦Technically the previous example had addition but not incrementation }\li0\fi0\ri0\sb0\sa0\ql\vertalt , I guess.{\*\bkmkend Notices Transformation Correctly:43732&Admin%^brmKiZZ8p-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        04:47          So you'd say it's because you've seen this kind of thing?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            04:49          Yeah.\cf0\cb0{\*\bkmkend Previously Seen:43732&Admin%^jryBAiA8H-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        04:49          Awesome. Thank you. 11:05\cf0\cb0{\*\bkmkend Answer - Right:43769&Admin%AuQlJ2QVCF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^lYyO0augh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Pointer Arithmetic Transformation:43748&Admin%^F7I5J4URN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Transformation:43748&Admin%^lbA6E0Oga-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 46:43748&Admin%^IAHAQQTpC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 19:43748&Admin%^ELemsurHV-000¦}{\*\bkmkstart Pre-increment Atom:43748&Admin%^DOY7O8SaI-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^tzePitynO-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^xl22xfBaO-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^k2PL5QmJr-000¦}Subject:            05:04          [Snippet 19] {\*\bkmkstart Correct Semantics:43545&Admin%^VJk0G5jwh-000¦}Alright. V1 is 2. {\*\bkmkstart Pre-increment Atom:43545&Admin%^ulFOuh2gq-000¦}And then V2 is equal to the incrementation of V1, so three minus two, so one.{\*\bkmkend Pre-increment Atom:43545&Admin%^ulFOuh2gq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So V2 is currently one. And then if we were to print out V1 and V2, we print out two and one. In spaces like that, there we go.{\*\bkmkend Correct Semantics:43545&Admin%^VJk0G5jwh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  11:06.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        05:45          Okay, great. And so, um, you wrote down a confidence of six, so can you explain why that confidence?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            05:49          \cf0\cb0{\*\bkmkstart Arithmetic:43732&Admin%^aR769Am0Q-000¦}{\*\bkmkstart Math is easy or hard:43732&Admin%^lHGsolrXA-000¦}{\*\bkmkstart Reasoning by Parts:43732&Admin%^sPUv5DFFn-000¦}Uh, uh, again, {\*\bkmkstart Previously Seen:43545&Admin%^4QUd7C7GJ-000¦}{\*\bkmkstart Sure:43545&Admin%^nmHXrwdFK-000¦}I think I've seen some more stuff like this before. Uh, the, {\*\bkmkstart Simple:43545&Admin%^rUtjpu2yz-000¦}I'm familiar with incrementation and evaluating simple, simple arithmetic on the side of assigning to ints at least{\*\bkmkend Simple:43545&Admin%^rUtjpu2yz-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Sure:43545&Admin%^nmHXrwdFK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Previously Seen:43545&Admin%^4QUd7C7GJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Reasoning by Parts:43732&Admin%^sPUv5DFFn-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Math is easy or hard:43732&Admin%^lHGsolrXA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Arithmetic:43732&Admin%^aR769Am0Q-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        06:04          Okay, cool. Thank you. It's 11:06 now.\cf0\cb0{\*\bkmkend Confidence - 6:43748&Admin%^k2PL5QmJr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^xl22xfBaO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Wrong:43748&Admin%^tzePitynO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Pre-increment Atom:43748&Admin%^DOY7O8SaI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 19:43748&Admin%^ELemsurHV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 115:43748&Admin%^IIB1CILE3-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^bmsSBH4Yw-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^aJz76uTwR-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^CLD798mZv-000¦}{\*\bkmkstart Type Conversion Atom:43748&Admin%^dddawQqo0-000¦}Subject:            06:20          [Snippet 115] {\*\bkmkstart Correct Semantics:43545&Admin%^U42oPc21K-000¦}{\*\bkmkstart Type Conversion Atom:43545&Admin%^o8PBGPgTE-000¦}It's a float V1 is one point nine nine. And {\*\bkmkstart Non-standard terminology:43545&Admin%^l9y3kXI7g-000¦rounding -> truncation }we assign it to an integer so it gets rounded off{\*\bkmkend Non-standard terminology:43545&Admin%^l9y3kXI7g-000¦rounding -> truncation }\li0\fi0\ri0\sb0\sa0\ql\vertalt . So V2 is going to be one and then we're going to print out V2 and we'll print out 1{\*\bkmkend Type Conversion Atom:43545&Admin%^o8PBGPgTE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43545&Admin%^U42oPc21K-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And then 11:07 and six.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        06:43          Okay. And could you explain that one too?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            06:45          Yeah. \cf0\cb0{\*\bkmkstart Non-standard terminology:43545&Admin%^h1AHKmFmJ-000¦}{\*\bkmkstart Unsure:43545&Admin%^DZAqenOax-000¦}Um, so this is uh, I think it's called slicing or uh, that's what I would call it, at least where you assign a float value to an integer and then the remainder is dropped off essentially when it, when it's gets assigned.{\*\bkmkend Unsure:43545&Admin%^DZAqenOax-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Non-standard terminology:43545&Admin%^h1AHKmFmJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        07:05          Um cool and great. Thank you. Alright, 11:07\cf0\cb0{\*\bkmkend Type Conversion Atom:43748&Admin%^dddawQqo0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^CLD798mZv-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^aJz76uTwR-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^bmsSBH4Yw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 115:43748&Admin%^IIB1CILE3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 50:43748&Admin%^sQPu1bqvg-000¦}{\*\bkmkstart Confusingness - Transformation:43748&Admin%^bZOGQb5eP-000¦}{\*\bkmkstart Conditional Operator Atom:43769&Admin%y58vNI4FlD-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^ffLXxGUkM-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^JxjvKf8uh-000¦}Subject:            07:18          [Snippet 50] Alright,{\*\bkmkstart Non-standard terminology:43545&Admin%^7Ej1VFrcz-000¦"Assigning nothing" } I'll assign three variables, zero, four and nothing{\*\bkmkend Non-standard terminology:43545&Admin%^7Ej1VFrcz-000¦"Assigning nothing" }\li0\fi0\ri0\sb0\sa0\ql\vertalt . And {\*\bkmkstart Correct Semantics:43545&Admin%^elksp93TI-000¦}if first variable is equal to two, which it's not, we'll set, we'll set V3 equal to five. So V3 will be five as V1's not equal to two then print out five,{\*\bkmkend Correct Semantics:43545&Admin%^elksp93TI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  11:08, six.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        07:54          Okay. And can you explain why the six there?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:59          Um, we just have to check one variable and it's not true. So we just assign a value to an integer and \cf0\cb0{\*\bkmkstart Simple:43545&Admin%^jrGDD3GGB-000¦Lack of manipulation is what makes it simple. }it's pretty easy to tell what that integer is because it doesn't get manipulated.{\*\bkmkend Simple:43545&Admin%^jrGDD3GGB-000¦Lack of manipulation is what makes it simple. }\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        08:13          Yeah. Cool. Thank you. 11:09.\cf0\cb0{\*\bkmkend Answer - Right:43748&Admin%^JxjvKf8uh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^ffLXxGUkM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Conditional Operator Atom:43769&Admin%y58vNI4FlD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Transformation:43748&Admin%^bZOGQb5eP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 50:43748&Admin%^sQPu1bqvg-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 11:43748&Admin%^08Lj7oQC0-000¦}{\*\bkmkstart Operator Precedence Atom:43748&Admin%^zoB8HYT5x-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^UBAm7icpD-000¦}{\*\bkmkstart Confidence - 4:43748&Admin%^VQE9ghZVf-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^B85EKtrUi-000¦}Subject:            08:25          [Snippet 11] Alright, we'll declare one variable, zero, V1 zero and then {\*\bkmkstart Correct Semantics:43545&Admin%^lbe0fbNyK-000¦}zero and one. Okay, so that's not true{\*\bkmkend Correct Semantics:43545&Admin%^lbe0fbNyK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Questioning Program Validity:43545&Admin%^QlTQd6f4S-000¦}{\*\bkmkstart Inferring semantics from other language:43732&Admin%^NnwDhTFrP-000¦}{\*\bkmkstart Boolean Value of Integer:43732&Admin%^rKsvaUqqJ-000¦}And then, or two, which that's interesting. {\*\bkmkstart Unsure:43545&Admin%^b3eem1dCh-000¦}I'm not sure if two evaluate because in a lot of the languages I work with can't use, you can't use two, to evaluate like that.{\*\bkmkend Questioning Program Validity:43545&Admin%^QlTQd6f4S-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43545&Admin%^b3eem1dCh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Incorrect Semantics:43545&Admin%^wDMEOmDJI-000¦}So I'm going to go with, I'm gonna go with false on this one that you cannot evaluate two to true, but you usually can evaluate zero and one in these kinds of languages to other boolean types which the zero and one is false.{\*\bkmkend Incorrect Semantics:43545&Admin%^wDMEOmDJI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkend Boolean Value of Integer:43732&Admin%^rKsvaUqqJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Inferring semantics from other language:43732&Admin%^NnwDhTFrP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt So that being said, V1 is three and we print three.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            09:28          I'm going to go with a four on that one because \cf0\cb0{\*\bkmkstart Boolean Value of Integer:43566&Admin%^RlRaQUcr5-000¦}{\*\bkmkstart Unsure:43566&Admin%^XKwJYdlyE-000¦}I'm not sure how this language evaluates two as a boolean value.{\*\bkmkend Unsure:43566&Admin%^XKwJYdlyE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Boolean Value of Integer:43566&Admin%^RlRaQUcr5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        09:37          Sure. You also mentioned, um, and a lot of languages I work with. Um, what were you thinking of specifically?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            09:45          \cf0\cb0{\*\bkmkstart Golang:43545&Admin%^UNLaOw4Qo-000¦}Uh,{\*\bkmkstart Boolean Value of Integer:43566&Admin%^MSJKBxQv2-000¦}{\*\bkmkstart Contrasting different languages:43732&Admin%^3dBQPex8I-000¦} I work in go so go doesn't do integer, um conditionals. They have predefined boolean types and they don't like to mix them.{\*\bkmkend Golang:43545&Admin%^UNLaOw4Qo-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Contrasting different languages:43732&Admin%^3dBQPex8I-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Boolean Value of Integer:43566&Admin%^MSJKBxQv2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Interviewer:        09:57          Gotcha. Okay, cool. Thank you.\cf0\cb0{\*\bkmkend Answer - Wrong:43748&Admin%^B85EKtrUi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 4:43748&Admin%^VQE9ghZVf-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^UBAm7icpD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Operator Precedence Atom:43748&Admin%^zoB8HYT5x-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 11:43748&Admin%^08Lj7oQC0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 105:43748&Admin%^Ds08z6Ujg-000¦}{\*\bkmkstart Literal Encoding Atom:43748&Admin%^UiqCYgXF3-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^8bQ0Qlbok-000¦}{\*\bkmkstart Confidence - 5:43748&Admin%^5udzC1wuz-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^ifhp4QQQv-000¦}Subject:            10:13          {\*\bkmkstart Guessing:43732&Admin%^CwQsBMO14-000¦}{\*\bkmkstart Relying on Correctness of Example:43732&Admin%^1o9cHqlJU-000¦}[Snippet 105] Alright. {\*\bkmkstart Notices Atom:43545&Admin%^bdYF4TAxH-000¦}{\*\bkmkstart Incorrect Semantics:43545&Admin%^FH0IOnGfq-000¦}{\*\bkmkstart Literal Encoding Atom:43545&Admin%^wCtz53al9-000¦}Int equals zero one three. Um {\*\bkmkstart Surprising comment:43845&Admin%UQvTOg1bB8-000¦The subject assumes that if the 0 isn't ignored it would generate an error. This sort of implies (1) the subject is used to error-rich languages (like go, rather than like C), and (2) maybe they program by trial and error, preferring to see if something works, rather than understanding how. }there's a leading zero there. So I assume the int is going to be 13, um, because it doesn't have to represent that zero in memory. Um, otherwise there would be an error, I assume.{\*\bkmkend Surprising comment:43845&Admin%UQvTOg1bB8-000¦The subject assumes that if the 0 isn't ignored it would generate an error. This sort of implies (1) the subject is used to error-rich languages (like go, rather than like C), and (2) maybe they program by trial and error, preferring to see if something works, rather than understanding how. }\li0\fi0\ri0\sb0\sa0\ql\vertalt  So it'll print out 13{\*\bkmkend Literal Encoding Atom:43545&Admin%^wCtz53al9-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43545&Admin%^FH0IOnGfq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Notices Atom:43545&Admin%^bdYF4TAxH-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , 11:11. Um, confidence five, let's say. It seems like the best. What I would assume is the behavior is that it would, it would slice up that zero when you try to assign it and then the five is because it could be just that they they wouldn't let you compile that zero.{\*\bkmkend Relying on Correctness of Example:43732&Admin%^1o9cHqlJU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Guessing:43732&Admin%^CwQsBMO14-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:05          Sure. Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            11:06          {\*\bkmkstart Non-standard terminology:43545&Admin%^MqNX3GndC-000¦Leading Zero }Trailing zero like that{\*\bkmkend Non-standard terminology:43545&Admin%^MqNX3GndC-000¦Leading Zero }\li0\fi0\ri0\sb0\sa0\ql\vertalt . That makes sense.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:10          Cool.\cf0\cb0{\*\bkmkend Answer - Wrong:43748&Admin%^ifhp4QQQv-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 5:43748&Admin%^5udzC1wuz-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^8bQ0Qlbok-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Literal Encoding Atom:43748&Admin%^UiqCYgXF3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 105:43748&Admin%^Ds08z6Ujg-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 85:43748&Admin%^YpIfg9ZL2-000¦}{\*\bkmkstart Repurposed Variable Atom:43748&Admin%^zNIX69kt3-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^ICz9KAraU-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^SbfeI6bk2-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^GjIxXsvH1-000¦}\par
\plain\fs26 Subject:            11:23          [Snippet 85] Alright, we have an array of some sort. V1 is an array and then what is uh, it's an array of length of five. So then we set the last element to three and then \cf0\cb0{\*\bkmkstart Incorrect Semantics:43545&Admin%^s2qlaT69c-000¦}{\*\bkmkstart Value Exists:43732&Admin%^6LJXaxMnb-000¦}{\*\bkmkstart Unsure:43545&Admin%^rEhJs289K-000¦}while that element... is there, I assume?{\*\bkmkend Unsure:43545&Admin%^rEhJs289K-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Value Exists:43732&Admin%^6LJXaxMnb-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43545&Admin%^s2qlaT69c-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So we can evaluate that to true. Um V1 three minus the element at V four three. So V zero. So the first element in the array is equal to three. Okay. And then V 4 equals, V 4 minus one. So we decrement the last element. {\*\bkmkstart Top-down comprehension:43732&Admin%^XATP3VVte-000¦}So we'll do that couple times until the last element is equal to zero{\*\bkmkend Top-down comprehension:43732&Admin%^XATP3VVte-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , then that's interesting. Then we'll try to print out the second element in the array. {\*\bkmkstart Caught Own Mistake Before Prompted:43545&Admin%^c15FZtR99-000¦}No I've made a mistake hold on, the it's actually indexing them{\*\bkmkend Caught Own Mistake Before Prompted:43545&Admin%^c15FZtR99-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . Um, so it'll, it'll set the values of the array, uh, the second element of the array in the second loop, the third element in the array, and the third loop. So this should be, that means the second value is two, and the third element is one. {\*\bkmkstart Author Intention:43732&Admin%^hGir8QQrQ-000¦}So we're trying to print out the second value in the last value{\*\bkmkend Author Intention:43732&Admin%^hGir8QQrQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , so it should be two and then zero. The time stops. So 11:14. And let me go with six i guess.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            13:34          \cf0\cb0{\*\bkmkstart Top-down comprehension:43732&Admin%^4OXRX70YZ-000¦}Um, it's, it, you know, {\*\bkmkstart Trick Question:43545&Admin%^HVaRASVZe-000¦}it tries to trick you with the, using the last element as the, the conditional that controls the while loop{\*\bkmkend Trick Question:43545&Admin%^HVaRASVZe-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . But, uh, I think it just, it proceeds through an array from the left side, storing the, the index variable its using for the while loop and then it breaks off and then you can print it out this specific element.{\*\bkmkend Top-down comprehension:43732&Admin%^4OXRX70YZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^GjIxXsvH1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^SbfeI6bk2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^ICz9KAraU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Repurposed Variable Atom:43748&Admin%^zNIX69kt3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 85:43748&Admin%^YpIfg9ZL2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Section - Evaluation:43748&Admin%^m9bZG37hy-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Section - Survey:43748&Admin%^lTEpNRXPc-000¦}Interviewer:        14:02          Cool. Thank you. Um, so I'll have you write down some information just about your experience, um, and then we can go back through and sort of talk about all these questions.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:16          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            15:19          How should I, should I try and think of an exact number for question five here? How many courses did I take in which I had to program or should I?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        15:27          Yeah, just do your best.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            15:29          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        15:30          It doesn't, it doesn't have to be perfect.\cf0\cb0{\*\bkmkend Section - Survey:43748&Admin%^lTEpNRXPc-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\plain\fs26\cf0\cb0{\*\bkmkstart Section - Discussion:43748&Admin%^2MmnrEQZI-000¦}\par
\plain\fs26 Interviewer:        21:18          Cool. Great. Thank you. So now I kind of just like to go back through all the same questions. Now that you're sort of done working through them, we sort of talk about them.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:34          Yeah, I'd like to know the answers.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:35          Cool. Um, can we trade pens though?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:38          Yeah\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:38          Okay. So now you can write whatever you want and we'll keep them separate. You know what I mean?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:48          [Snippet \cf0\cb0{\*\bkmkstart Snippet - 45:43768&Admin%97EOic3aHm-000¦}45] So I guess the first thing I want to, um, ask before we go ahead and dive into them is do you have any questions about this particular question? The program 45?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43769&Admin%vtzXO6fKLf-000¦}Subject:            22:00          {\*\bkmkstart Non-standard terminology:43545&Admin%^QJQkEhKL1-000¦}Uh, I guess what happens when you evaluate, is this an array or a slice? Uh do? {\*\bkmkstart Question about Semantics:43732&Admin%^QNFCzGzyO-000¦}Does C have slices or does it only have arrays?{\*\bkmkend Non-standard terminology:43545&Admin%^QJQkEhKL1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Question about Semantics:43732&Admin%^QNFCzGzyO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:08          Uh, when you say slice, what do you mean?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            22:10          I mean, um like a dynamically allocated a sort of array type construct that references an underlying array but is kind of, this is something in go that, uh,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:22          Yeah I was going to ask\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            22:24          that they um, in go it points to a, uh, an underlying array that go controls and um, it, it keeps, it keeps the space dynamically allocated for you based on what you append to the slice.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:40          Sure.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart C Experience:43732&Admin%^JDBc0x2tw-000¦}Subject:            22:41          {\*\bkmkstart Golang:43545&Admin%^2aKjSEiFL-000¦}{\*\bkmkstart Inferring semantics from other language:43732&Admin%^dMK7Z5GZu-000¦}Um, so this is how you would do something like that in go and I know go's based a lot on C, so I was wondering if there's something like that, but {\*\bkmkstart C vs C++:43560&Admin%^F8whEaica-000¦}{\*\bkmkstart C Experience:43560&Admin%^GHZ6mIsE8-000¦}I've never done C programming itself.{\*\bkmkend Inferring semantics from other language:43732&Admin%^dMK7Z5GZu-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Golang:43545&Admin%^2aKjSEiFL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  I've done well. I did a little C programming in my operating systems class, but mostly done C plus plus programming{\*\bkmkend C Experience:43560&Admin%^GHZ6mIsE8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And I'm familiar with arrays in c plus plus, but not how they're, they are in c.{\*\bkmkend C vs C++:43560&Admin%^F8whEaica-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Correct Semantics:43560&Admin%^aTqi8l7TP-000¦}{\*\bkmkstart Unsure:43560&Admin%^n1A88L5RS-000¦}{\*\bkmkstart Question about Semantics:43560&Admin%^PEsS22TM4-000¦}So is this an array?{\*\bkmkend Question about Semantics:43560&Admin%^PEsS22TM4-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  And {\*\bkmkstart Non-standard terminology:43732&Admin%^Pq4aa3In4-000¦An array with 4 elements is tyipcally called "size 4", not "size 3". The confusion is likely because the last element is indexed at position 3. }I'm assuming it's assuming that it's a size four array or size three, I guess is whatever{\*\bkmkend Non-standard terminology:43732&Admin%^Pq4aa3In4-000¦An array with 4 elements is tyipcally called "size 4", not "size 3". The confusion is likely because the last element is indexed at position 3. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Incorrect Semantics:43560&Admin%^l3e19Dcza-000¦}{\*\bkmkend Correct Semantics:43560&Admin%^aTqi8l7TP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkstart Multiple Possible Semantics:43560&Admin%^4gnAJujIA-000¦}{\*\bkmkstart Question about Semantics:43560&Admin%^gXcxUa4B0-000¦}Um, and then what happens when you, when you add one to an array, does it append or does it in increment the size?{\*\bkmkend Incorrect Semantics:43560&Admin%^l3e19Dcza-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Question about Semantics:43560&Admin%^gXcxUa4B0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Multiple Possible Semantics:43560&Admin%^4gnAJujIA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43560&Admin%^n1A88L5RS-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend C Experience:43732&Admin%^JDBc0x2tw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43769&Admin%vtzXO6fKLf-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        23:24          Well, so there are a bunch of things to talk about. So first of all, um the dynamically allocated array that you were talking about. Um, my first introduction to that sort of thing was like ArrayList in Java. That's what you're talking about that?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            23:39          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        23:40          Yeah. Um, so that doesn't exist natively in C, although there are plenty libraries that add then after the fact, which is probably one of the things that Go fixed about C. Um, so this right here, the, um, uh, int V1 equals four, two, seven, five. That's just the initialization of an array.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:04          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:04          A length four array with those four elements. So, um, so you actually drew it out perfectly and it's an array with these elements. Um, and then so when we go to the next line, um, uh, so you were reading it out. So, um, what, you know, the type of V2, right?\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Subject:            24:29          Yeah\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:29          Um, which is?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:30          \cf0\cb0{\*\bkmkstart Correct Semantics:43560&Admin%^bHQEA7wzO-000¦}It's a pointer to an int.{\*\bkmkend Correct Semantics:43560&Admin%^bHQEA7wzO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:32          Right? Um, and do you know the type of V1\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:39          \cf0\cb0{\*\bkmkstart Correct Semantics:43560&Admin%^dVJguGBij-000¦}{\*\bkmkstart Unsure:43560&Admin%^EklxtLyny-000¦}Uh, that's where, so that's where I was confused. I guess it's an int array that would be the type of it, what I would assume it is.{\*\bkmkend Unsure:43560&Admin%^EklxtLyny-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43560&Admin%^dVJguGBij-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:50          Right so\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:50          \cf0\cb0{\*\bkmkstart Attribution of Confusion:43560&Admin%^gPf1kvfPr-000¦}and then you try to add an int to that int array, which is I think what tripped me up.{\*\bkmkend Attribution of Confusion:43560&Admin%^gPf1kvfPr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:57          Right? Yeah. Um, so you've mentioned a couple of different things that can happen. One is maybe would add an element to the array and the other thing is maybe add something to the length. I think there are programming languages in which both those things happen. The way it works in C is it turns out that um an array. Something of type array is actually equivalent to the pointer to the first element of the array.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:26          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:27          So an array is actually just the place in memory where all the elements are stored sequentially. So,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:36          \cf0\cb0{\*\bkmkstart Incorrect Semantics:43560&Admin%^h4LeYOwqH-000¦Except he changed his answer away from the correct answer to an incorrect one. I think this is more of a misunderstanding of my own description of the semantics though, rather his original comprehension. }so then this would be, it would be a pointer to two then is what I'm assuming{\*\bkmkend Incorrect Semantics:43560&Admin%^h4LeYOwqH-000¦Except he changed his answer away from the correct answer to an incorrect one. I think this is more of a misunderstanding of my own description of the semantics though, rather his original comprehension. }\li0\fi0\ri0\sb0\sa0\ql\vertalt , {\*\bkmkstart Correct Semantics:43560&Admin%^lGPZNai4b-000¦}or ah no, I guess, is it a pointer to four?{\*\bkmkend Correct Semantics:43560&Admin%^lGPZNai4b-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:50          Uh, yeah. Why? Why two?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:54          I guess. I thought it would. So it's a, it's a pointer to the first element of an array is what you said, and then when you increment it, I guess I was, \cf0\cb0{\*\bkmkstart Mental Model:43560&Admin%^X3NFiXudx-000¦}I was thinking something along the lines of like incrementing, like a, like a stack I guess, and one being like a, like an increment of that stack is such that you could go to the next element in the array that way.{\*\bkmkend Mental Model:43560&Admin%^X3NFiXudx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:18          Yeah. So, um, I think maybe I misspoke, um just V1 points to the first element.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:27          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:27          So when you do add one, you're absolutely right. it would then point to two.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:31          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:33          Um, so that's actually what this does output\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:37          two?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:37          Um, yeah, because it's the value, the star there, the value of the thing that this points to which is in the next one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:44          Okay. Um, that makes sense.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:46          But you know, I'm pretty sure if you put this into javascript or something it would say exactly what you said.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:54          Great.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:54          So it's just dependent on. Okay, cool. Um, is there, do you have any other questions about this or.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:00          No, I think that was my main, my main thing.\cf0\cb0{\*\bkmkend Snippet - 45:43768&Admin%97EOic3aHm-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 46:43768&Admin%JI2LqeaNnM-000¦}Interviewer:        27:03          [Snippet 46] Okay, cool. So we can go onto the next one, number 46, which actually looks kind of similar. Um, do you have any questions about this? Do you feel like you understood what was going on there?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:15          Uh, I think I understood it. I guess. Did I get it right?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:20          Um, yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:24          Okay. Um, then then. No, I think that this is, this seems like a more.\cf0\cb0{\*\bkmkstart Previously Seen:43563&Admin%^juxyMkgQM-000¦}{\*\bkmkstart Sure:43563&Admin%^V7q9m9RTm-000¦} This is something I'm more familiar with where you access it by the element{\*\bkmkend Sure:43563&Admin%^V7q9m9RTm-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Previously Seen:43563&Admin%^juxyMkgQM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and then{\*\bkmkstart Sure:43563&Admin%^5Qgo3kH7Z-000¦}{\*\bkmkstart Previously Used:43563&Admin%^r8E5Ri29e-000¦}{\*\bkmkstart Apparent Contradiction:43563&Admin%^wqlo5Xjey-000¦In the previous snippet (45), the participant did appear to be tripped up by pointers. } the pointers don't really trip me up because pointers are I've been working with them for awhile now{\*\bkmkend Apparent Contradiction:43563&Admin%^wqlo5Xjey-000¦In the previous snippet (45), the participant did appear to be tripped up by pointers. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Previously Used:43563&Admin%^r8E5Ri29e-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Sure:43563&Admin%^5Qgo3kH7Z-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:40          Sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:40          Um, that's it. Yeah.\cf0\cb0{\*\bkmkend Snippet - 46:43768&Admin%JI2LqeaNnM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 19:43768&Admin%dzvYqwe160-000¦}Interviewer:        27:42          [Snippet 19] Cool. I don't know why the paper is so sticky today. Um, okay. So the next one, number 19, do you have questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43769&Admin%4ssYO6GYH2-000¦}Subject:            27:57          Um, other than did I get it right? I don't think so. Um, I, I guess I'm interested in the {\*\bkmkstart Non-standard terminology:43563&Admin%^B3Gn2hh92-000¦In C "operator precedence" is a more common phrase than "order of operations", which is more commonly found in an elementary arithmetic context. }operation order{\*\bkmkend Non-standard terminology:43563&Admin%^B3Gn2hh92-000¦In C "operator precedence" is a more common phrase than "order of operations", which is more commonly found in an elementary arithmetic context. }\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Apparent Contradiction:43563&Admin%^9wiv8Kg3i-000¦This might imply a couple different things. If the participant was talking about operator precedence, then this could mean they assumed left-associativity. Alternatively they might be talking about the order in which side-effects are processed, in which case they mean that they believe (rightfully) pre-incrment applies its update immediately.Based on the participants next comment it's clear that "evaluates left-to-right" is a description of parsing, which again is non-standard use of nomenclature. }I evaluated it left to right{\*\bkmkend Apparent Contradiction:43563&Admin%^9wiv8Kg3i-000¦This might imply a couple different things. If the participant was talking about operator precedence, then this could mean they assumed left-associativity. Alternatively they might be talking about the order in which side-effects are processed, in which case they mean that they believe (rightfully) pre-incrment applies its update immediately.Based on the participants next comment it's clear that "evaluates left-to-right" is a description of parsing, which again is non-standard use of nomenclature. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . But I know, {\*\bkmkstart Inferring Semantics from Reasoning:43563&Admin%^23XieichP-000¦}I guess that you can't, you can't do it any other way{\*\bkmkend Inferring Semantics from Reasoning:43563&Admin%^23XieichP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So it would be, it would be what, I assume it's one at the end of the XXX evaluation.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        28:20          But what do you mean by evaluation order?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            28:23          \cf0\cb0{\*\bkmkstart Visual Reference:43732&Admin%^qSeGacaDl-000¦}{\*\bkmkstart Inferring Semantics from Reasoning:43732&Admin%^USJLfDQBJ-000¦I wonder if his implication is about the spacing, since that's one of relatively few things that could change, while keeping the syntax the same that would change the possible interpretation. }Um, I guess {\*\bkmkstart Precedence:43563&Admin%^NaNJ7rDBI-000¦}{\*\bkmkstart Counterfactual Semantics:43563&Admin%^0n09poBD9-000¦}I would be curious if it could do something like this [puts parentheses around (V1 - 2)]{\*\bkmkend Counterfactual Semantics:43563&Admin%^0n09poBD9-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Precedence:43563&Admin%^NaNJ7rDBI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . Uh, um, but based on how it is written, I would, I would say that first the increment operator acts on V1 and then we subtract two. And that's how I would read it. And that's what I assume is the correct answer.{\*\bkmkend Visual Reference:43732&Admin%^qSeGacaDl-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Inferring Semantics from Reasoning:43732&Admin%^USJLfDQBJ-000¦I wonder if his implication is about the spacing, since that's one of relatively few things that could change, while keeping the syntax the same that would change the possible interpretation. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43769&Admin%4ssYO6GYH2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        28:50          Sure. So, yeah, the alternative would be that first, it does the minus and then it does the plus plus.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            28:56          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        28:57          Yeah, um, so that's a great thing to wonder. You did get the question right. So your, your instinct originally was correct. Um, but then additionally, um, this type of thing, have you seen, um, the other type of plus plus you can put the plus plus behind the variable instead of in front of it?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43769&Admin%nZxbOlksll-000¦}Subject:            29:21          Yes, a pre incremented and post increment, right?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        29:24          Exactly\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            29:24          Is what it's called? Um, \cf0\cb0{\*\bkmkstart Counterfactual Semantics:43563&Admin%^3lFOgX0HG-000¦}{\*\bkmkstart Unsure:43563&Admin%^DrenFxL4h-000¦}so in that case, I guess it would evaluate V1, it would, V2 would evaluate to, um, let's see it's two, V2 would evaluate to zero and then V1 would be equal to three in that example? Is that how that would work? Or am I getting that wrong?{\*\bkmkend Unsure:43563&Admin%^DrenFxL4h-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Counterfactual Semantics:43563&Admin%^3lFOgX0HG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43769&Admin%nZxbOlksll-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        29:48          No. Yeah, you're exactly right.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            29:50          Okay.\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Interviewer:        29:50          So it's not quite what you wrote there with the parentheses, but it's pretty close.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            29:55          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        29:57          So I think that's, that's a common sort of misconception that people have, but again, {\*\bkmkstart Surprising comment:43838&Admin%juKekvsy8g-000¦The participant actually got this snippet wrong. The researcher was mistaken. }you got this one totally right{\*\bkmkend Surprising comment:43838&Admin%juKekvsy8g-000¦The participant actually got this snippet wrong. The researcher was mistaken. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . Um, but yeah, also in general, unary operators tend to operate before binary operators. Not always, but most of the time. So that's sort of a good bet anyway. Um, yeah. Any other questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:18          No\cf0\cb0{\*\bkmkend Snippet - 19:43768&Admin%dzvYqwe160-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 115:43768&Admin%QeiI4qQH15-000¦}Interviewer:        30:18          [Snippet 115] Cool. Okay. Number 115. Oh, right, yeah. I remember this one. Um, have any questions?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43769&Admin%XbV0NoywCj-000¦}Subject:            30:28          {\*\bkmkstart Counterfactual Semantics:43732&Admin%^e4zZfdDuJ-000¦}{\*\bkmkstart Unsure:43732&Admin%^RmzjHcXyU-000¦}{\*\bkmkstart C vs C++:43732&Admin%^zlwmjQokQ-000¦}{\*\bkmkstart C Experience:43732&Admin%^oXDmKqy39-000¦}No, I don't think so. Uh, I did. The only behavior I'd be interested in is if for some reason C rounds when you, when you slice something, um, which I wouldn't expect to happen based on my experience with C plus plus. So that's, I, I just assumed that it's one that just slices off the the decimal.{\*\bkmkend C Experience:43732&Admin%^oXDmKqy39-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend C vs C++:43732&Admin%^zlwmjQokQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43732&Admin%^RmzjHcXyU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Counterfactual Semantics:43732&Admin%^e4zZfdDuJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43769&Admin%XbV0NoywCj-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:53          Sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:53          Part of it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:54          Um, so you said your, with your experience with uh C plus plus, um, when you learned what happens in this scenario, is that something that you sort of found out through trial and error or is that something you were taught in a class?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            31:08          Uh,\cf0\cb0{\*\bkmkstart Learned from Class:43563&Admin%^KBPHtBUf7-000¦} I was taught that in the class, I think first, um, it's the, I think my first experience with C plus plus was the data structures course [at university]. Um, and I think that was one of the things they drove home because that, {\*\bkmkstart Contrasting different languages:43563&Admin%^aCOlJdzKw-000¦}{\*\bkmkstart Matlab:43563&Admin%^zMsRS8BRy-000¦}that doesn't really happen in uh, I started programming my programming career in Matlab{\*\bkmkend Matlab:43563&Admin%^zMsRS8BRy-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Contrasting different languages:43563&Admin%^aCOlJdzKw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Learned from Class:43563&Admin%^KBPHtBUf7-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  actually. Um, and they may or may not have mentioned that I actually, {\*\bkmkstart Matlab:43563&Admin%^IcHChkjeG-000¦}{\*\bkmkstart Long ago:43563&Admin%^FHHdwhSGp-000¦}{\*\bkmkstart Static vs Dynamic type-checking:43563&Admin%^Z6U6KRCXm-000¦A static/dynamic type system can have any float->int conversion semantics. This example might not reproduce in many dynamically typed languages, but int-truncation certainly could in general. }I haven't programmed in Matlab since then{\*\bkmkend Long ago:43563&Admin%^FHHdwhSGp-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Matlab:43563&Admin%^IcHChkjeG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and I'm not sure if that language is statically typed or not, but I know in python you could do something like this and it would be, I think, fine because it's dynamically typed.{\*\bkmkend Static vs Dynamic type-checking:43563&Admin%^Z6U6KRCXm-000¦A static/dynamic type system can have any float->int conversion semantics. This example might not reproduce in many dynamically typed languages, but int-truncation certainly could in general. }\li0\fi0\ri0\sb0\sa0\ql\vertalt  But yeah, when, {\*\bkmkstart Learned from Class:43563&Admin%^FDFvBQgLX-000¦}{\*\bkmkstart Correct Semantics:43563&Admin%^sxtZxQY8y-000¦}when I, when I learned it, a professor made sure to tell us that if you try and assign it a float to an an int, you're gonna drop the decimal part. Yeah, you're going to lose it{\*\bkmkend Correct Semantics:43563&Admin%^sxtZxQY8y-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Learned from Class:43563&Admin%^FDFvBQgLX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:08          Totally. Okay. So yeah. Um, again, you're totally right. Uh, that process is usually called truncation.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:16          Truncation. Yeah. That's a good word\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:18          just to hold onto if you need to, but yeah, you just grabbed it absolutely correctly. Um, cool. Uh, any other questions about this moment?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:25          No, that's it.\cf0\cb0{\*\bkmkend Snippet - 115:43768&Admin%QeiI4qQH15-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 50:43768&Admin%9uRwr66C5Y-000¦}Interviewer:        32:30          [Snippet 50] Number 50. Which one was this one? Yeah. Did you have any questions about how this one works?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:36          I don't think so.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:38          Okay. Yeah, it's pretty straightforward.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:40          Yeah.\cf0\cb0{\*\bkmkend Snippet - 50:43768&Admin%9uRwr66C5Y-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 11:43768&Admin%2lwlbvTOQe-000¦}Interviewer:        32:41          [Snippet 11] Alright, let's move ahead [laughter]. Um okay, Number 11.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43771&Admin%UgFH6MK4DQ-000¦}Subject:            32:47          {\*\bkmkstart Boolean Value of Integer:43566&Admin%^TSzkhueer-000¦}Um, my question on this one, is it, {\*\bkmkstart Question about Semantics:43563&Admin%^wOlrn3HTx-000¦}can you evaluate an integer greater than zero as true{\*\bkmkend Question about Semantics:43563&Admin%^wOlrn3HTx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  I guess.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:57          Okay. Um, is there something special about zero or?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            33:02          Uh, well, \cf0\cb0{\*\bkmkstart Unsure:43563&Admin%^ZjMosTIQ9-000¦}{\*\bkmkstart Correct Semantics:43563&Admin%^fPyVtJRZn-000¦}zero would be false in my, in my assumption{\*\bkmkend Correct Semantics:43563&Admin%^fPyVtJRZn-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43563&Admin%^ZjMosTIQ9-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And then {\*\bkmkstart Correct Semantics:43563&Admin%^n7Y8m9Qgr-000¦}one is true{\*\bkmkend Correct Semantics:43563&Admin%^n7Y8m9Qgr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and then I will,{\*\bkmkstart Correct Semantics:43563&Admin%^fb1vpvbM0-000¦}{\*\bkmkstart Question about Semantics:43563&Admin%^J3U8f4UxG-000¦} I'm curious is if they treat numbers greater than one also as true because they're not zero{\*\bkmkend Question about Semantics:43563&Admin%^J3U8f4UxG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43563&Admin%^fb1vpvbM0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43771&Admin%UgFH6MK4DQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        33:17          or one, which would be true.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            33:18          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Inferring Semantics from Reasoning:43732&Admin%^1cjbjxpzX-000¦}Interviewer:        33:18          Yeah, yeah, yeah. Um, out of curiosity, before we talk about it, um, have you ever thought about, uh, if, if that would be different from like negative numbers or anything like that?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Design Concerns:43732&Admin%^hUb0XSqtM-000¦}Subject:            33:30          I had while I was saying it, {\*\bkmkstart Unsure:43563&Admin%^YBfe1Qqn6-000¦}{\*\bkmkstart Incorrect Semantics:43563&Admin%^X3Y8kbvmS-000¦}I was curious if, if, if negative numbers would be like a falsehood or a, again, it would be another behavior you'd have to account for{\*\bkmkend Incorrect Semantics:43563&Admin%^X3Y8kbvmS-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43563&Admin%^YBfe1Qqn6-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . I, I, I, {\*\bkmkstart Relying on Correctness of Example:43563&Admin%^u1IrEiOg0-000¦}based on this example, I assume you can evaluate this{\*\bkmkend Relying on Correctness of Example:43563&Admin%^u1IrEiOg0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , so I, I'm guessing two is {\*\bkmkstart Incorrect Semantics:43563&Admin%^xVVEpsSPB-000¦}I would guess two is false because it's not zero or one, it doesn't have an assigned value and that's how I think I would approach it as somebody designing a language where if I was going to reserve some numbers for conditionals, I wouldn't want to have a huge range of them because you could just arbitrarily assign them and I think that would be kind of a waste, I guess{\*\bkmkend Incorrect Semantics:43563&Admin%^xVVEpsSPB-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Design Concerns:43732&Admin%^hUb0XSqtM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        34:10          Sure. Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            34:11          Um, but, uh, if, if, \cf0\cb0{\*\bkmkstart Unsure:43563&Admin%^muapulw9y-000¦}{\*\bkmkstart Incorrect Semantics:43563&Admin%^7YzZnf0a3-000¦}{\*\bkmkstart Inferring Semantics from Reasoning:43853&Admin%SeAsNUcN3F-000¦}if two was, two was true and the rest of the natural numbers were true, then I would, I guess negative numbers, I will probably say they're false{\*\bkmkend Inferring Semantics from Reasoning:43853&Admin%SeAsNUcN3F-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43563&Admin%^7YzZnf0a3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43563&Admin%^muapulw9y-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . Maybe that's a, maybe I'm labeling the negative numbers harshly there, but\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        34:34          Discriminating against them\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            34:35          but, uh, that, \cf0\cb0{\*\bkmkstart Incorrect Semantics:43566&Admin%^jzyQqDLT0-000¦}that would make sense if they, if we have a range of natural numbers that are positive and then we have a range of numbers that are negative and false{\*\bkmkend Incorrect Semantics:43566&Admin%^jzyQqDLT0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Boolean Value of Integer:43566&Admin%^TSzkhueer-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Inferring Semantics from Reasoning:43732&Admin%^1cjbjxpzX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        34:47          Yeah. Okay, cool. Um, so it turns out in C and c plus plus, um, the way that a truthness and falsiness works for logical tests is it doesn't even so much look at the, um, the value of the number as like an integer. It looks at the bits that are in the, is it a bit wise comparison then? It's a bit wise comparison and all it looks for is, are there any ones at all?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            35:22          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        35:23          Um, so if, if the variable contains only zeros, it's false, yet any one's its true. So zero is always false and any other number is true\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        35:38          except for negative zero. No, including negative zero.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            35:48          [Writes binary logic table] Will this evaluate to true then at the end? Uh, if it's, if we get to, if we get to this, which,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        35:56          um, I'm not, I'm not sure what I think this is or and this is an and Oh, I see. Oh, I see. I, I'm sorry. Um, do these operations are not that wise. These are, these are logical operations, um, but the way that you evaluate the logical thing. So basically what I was just trying to say about the contents is um zero is false and any other number is true.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:23          Gotcha.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        36:24          Positive, negative, even negative zero.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:27          Interesting.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        36:27          Um, so you can think of, you can literally replace this with the key word false. And this one with the keyword true. And this one with the keyword. True. So knowing that, um, does that change how you evaluate this or is it still the same?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:42          false and true and that's false? \cf0\cb0{\*\bkmkstart Caught Own Mistake After Prompted:43566&Admin%^SfacKkBuM-000¦}This is true. So I would, I would change my answer to six.{\*\bkmkend Caught Own Mistake After Prompted:43566&Admin%^SfacKkBuM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        36:49          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:51          Um, if I, if I could.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        36:53          Okay. Um, so how, how would, um, how would you arrive at that answer?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            37:00          Um, I would do, \cf0\cb0{\*\bkmkstart Operator Precedence Atom:43566&Admin%^F7LZ5cfQL-000¦}{\*\bkmkstart Correct Semantics:43566&Admin%^GqjlolVIO-000¦}{\*\bkmkstart Caught Own Mistake After Prompted:43733&Admin%^M8Nd6gnZe-000¦}I would do this operation first where we're comparing a false and a true value. Um, so for that, for that comparison or for that, and to be true, they both have to be true. So then the result of that would be false. So now we're a doing a logical or between a false and a true value. So there just has to be one true value there. So that would return true. Therefore, this conditional would be true and that V1 would be equal to six because that's where the true part of that conditional is.{\*\bkmkend Caught Own Mistake After Prompted:43733&Admin%^M8Nd6gnZe-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43566&Admin%^GqjlolVIO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Operator Precedence Atom:43566&Admin%^F7LZ5cfQL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        37:34          Cool. So one last question in this, in this logical test in here, zero and and one. Um, how do you know that the And operation happens before the Or operation?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            37:48          \cf0\cb0{\*\bkmkstart Correct for Wrong Reasons:43566&Admin%^1fKtSJDsQ-000¦Participant hadn't even considered that precedence was an issue }{\*\bkmkstart Unsure:43566&Admin%^DmQZzPp8C-000¦}Uh, I don't. I guess it's uh, it's something that I just assumed intuitively uh and maybe maybe I was wrong, but um, generally when I'm evaluating, uh, when I think about it, I start to get iffy I guess, um, but I, I guess I like to evaluate from the left to the right. Um, and that's, that's, I don't think I can explain why I do that and I may or may not have learned that at some point or learned it falsely or assumed it falsely. But, um, that's, that's how I would approach something like that. Um, yeah.{\*\bkmkend Unsure:43566&Admin%^DmQZzPp8C-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct for Wrong Reasons:43566&Admin%^1fKtSJDsQ-000¦Participant hadn't even considered that precedence was an issue }\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        38:28          Okay. Well, it turns out that that is the right answer or your, your new one is the right answer. The six six and the rule about reading left to right. That is true when operators have the same precedence. So, um, for example, if you have multiple, uh, minus signs in a row, they all have the same precedence, so you read them left to right. It turns out that and and or don't have the same precedence level.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            38:58          Interesting.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        38:59          Um, but it's still.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            39:02          it's okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        39:02          Yeah. Because the And still operates first. Um, but you know, if it was in the opposite order, maybe not the case anyhoo. Any other questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            39:13          No. Thank you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        39:17          And is this the last one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            39:21          I think there's two more\cf0\cb0{\*\bkmkend Snippet - 11:43768&Admin%2lwlbvTOQe-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 105:43768&Admin%0hhGbaMdsC-000¦}Interviewer:        39:21          [Snippet 105] Okay. So this 105. Do you have any questions about this one?\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43771&Admin%yzX9gV57b5-000¦}\par
\plain\fs26 Subject:            39:26          \cf0\cb0{\*\bkmkstart Questioning Program Validity:43566&Admin%^a95ex4lL8-000¦}{\*\bkmkstart Unsure:43566&Admin%^DgDH0QUaP-000¦}{\*\bkmkstart Multiple Possible Semantics:43566&Admin%^M6Gxnkr35-000¦}{\*\bkmkstart Notices Atom:43566&Admin%^AcdsO1JAi-000¦}{\*\bkmkstart Incorrect Semantics:43566&Admin%^qaLl9mRON-000¦}Uh, is it, is it a valid assigning zero. One, three there.{\*\bkmkend Notices Atom:43566&Admin%^AcdsO1JAi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  Um, I, I, I assumed that it just, it chopped off the, the, the leading zero when it prints it out because it, {\*\bkmkstart Inferring Semantics from Reasoning:43733&Admin%^GMOVvGIQA-000¦This seems to be based on logic that isn't harmonious with things like fixed-sized datatypes or two's complement negative values. }if it's an integer then it doesn't need to really represent that leading zero when it stores it{\*\bkmkend Inferring Semantics from Reasoning:43733&Admin%^GMOVvGIQA-000¦This seems to be based on logic that isn't harmonious with things like fixed-sized datatypes or two's complement negative values. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . So, um, the, the two options I'm thinking is either that it's an error, they wouldn't want you to do something like that for whatever reason. They don't want you to leave leading zeros in. But I could also see them, like if you're, if you're taking from a, like a larger thing and you want to make it equal to an integer, I don't know.{\*\bkmkend Multiple Possible Semantics:43566&Admin%^M6Gxnkr35-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43566&Admin%^DgDH0QUaP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Questioning Program Validity:43566&Admin%^a95ex4lL8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43566&Admin%^qaLl9mRON-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:08          Um, what do you mean if you're taking from a larger thing?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:11          \cf0\cb0{\*\bkmkstart Inferring Semantics from Reasoning:43566&Admin%^dxpwXNj2E-000¦}Like if you were, if you programmatically like taking some texts maybe, and it's, and it's represented like they, they, they represented as like eight, eight numbers no matter what it is.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:23          Oh, I see. Like a fixed width.\par
\pard\plain\plain\fs26\par
\plain\fs26{\*\bkmkstart Language Expectations:43731&Admin%^TBq3hSCLl-000¦}Subject:            40:25          Yeah, fixed width. And if you're reading something like that and you wanted that to be an int and sure I would, I would expect them to allow you to do that. And I guess it's more I'm curious as to what it is.\cf0\cb0{\*\bkmkend Inferring Semantics from Reasoning:43566&Admin%^dxpwXNj2E-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Language Expectations:43731&Admin%^TBq3hSCLl-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43771&Admin%yzX9gV57b5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:39          Yeah, sure. Um, well yeah, it's good that you picked up on that that's a little weird. Um, it turns out in C, um, when you put a zero in front of an Integer, that means you're representing the number as an octal value.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:57          Gotcha. Interesting.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:58          So do you know like hexadecimal? You can put. Ox.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:01          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:02          Yeah. So it's the same thing except um only up to eight instead of up to 16.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43771&Admin%gPsCfisiOp-000¦}Subject:            41:07          {\*\bkmkstart Multiple Possible Semantics:43566&Admin%^izoyQyuvV-000¦}Okay. {\*\bkmkstart Did Not Catch Own Mistake After Prompted:43733&Admin%^Qap6xrhsJ-000¦}So it would still print 13 or zero?{\*\bkmkend Did Not Catch Own Mistake After Prompted:43733&Admin%^Qap6xrhsJ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Caught Own Mistake After Prompted:43733&Admin%^UvE3yFcRy-000¦}One three then would been zero one three or would it print the would, would it be the octal conversion? So would it be something like a three plus eight? Now 11. {\*\bkmkstart Unsure:43566&Admin%^cOooC4xCZ-000¦}{\*\bkmkstart Correct Semantics:43566&Admin%^V2gTBcVfF-000¦}Would it print 11{\*\bkmkend Correct Semantics:43566&Admin%^V2gTBcVfF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43566&Admin%^cOooC4xCZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt ?{\*\bkmkend Multiple Possible Semantics:43566&Admin%^izoyQyuvV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Caught Own Mistake After Prompted:43733&Admin%^UvE3yFcRy-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Discussion Question:43771&Admin%gPsCfisiOp-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:26          Yeah. Um that too is a great question. So this, um, this has been an octal representation of a number, which as you said, the decimal equivalent of that is 11. And then when you go down to this print statement,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:40          It's a decimal\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:41          it, that %d is for decimal, so it takes that number represents a decimal. So it does the exact conversion you said.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:48          So the output is 11\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:50          It is 11 for all the reasons you said.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:52          Okay, interesting. Yep. Cool.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:54          All right, so I think we talked about every line here.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:57          Yeah\cf0\cb0{\*\bkmkend Snippet - 105:43768&Admin%0hhGbaMdsC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 85:43768&Admin%LmlbyHwdYD-000¦}Interviewer:        42:00          [Snippet 85] Alright. And then the next one, number 85. Yeah. So, uh, do you have questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            42:09          Um, no, I guess um. Did, I, did I get it right? And then from there I'll ask questions.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        42:20          Um, I realized earlier that definitely getting you to ask questions before saying whether or not it's right is preferable. So. Okay. If you have any maybe questions we should go over those and then we can.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            42:31          \cf0\cb0{\*\bkmkstart Cognitive Load:43733&Admin%^JHnHQA72V-000¦}Okay. Sure. Um, let's see. Uh, I don't, I don't think I really noticed any maybes on this.{\*\bkmkstart Sure:43566&Admin%^ic6P0SUcj-000¦} I, I feel confident about this, this problem.{\*\bkmkend Sure:43566&Admin%^ic6P0SUcj-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  Um, {\*\bkmkstart Attribution of Confusion:43566&Admin%^lME98XBtq-000¦}{\*\bkmkstart Repurposed Variable Atom:43566&Admin%^XRaNJxfys-000¦}{\*\bkmkstart Top-down comprehension:43566&Admin%^xZiIHLxTp-000¦}I think I almost got tripped up when I, when I forgot that it was, it was using the value of the last element as the index of the, the element that you're kind of assigning to a or a or a or I assumed it, it wasn't changing but it was. So.{\*\bkmkend Top-down comprehension:43566&Admin%^xZiIHLxTp-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Repurposed Variable Atom:43566&Admin%^XRaNJxfys-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attribution of Confusion:43566&Admin%^lME98XBtq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Cognitive Load:43733&Admin%^JHnHQA72V-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        43:09          Do you have a sense for why that was sort of confusing or surprising?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            43:13          \cf0\cb0{\*\bkmkstart Alternative Idioms:43566&Admin%^hE5rNs1bU-000¦}{\*\bkmkstart Attribution of Confusion:43566&Admin%^bPRexbGFe-000¦}{\*\bkmkstart Would Have Written it Differently:43733&Admin%^bfEETrMfF-000¦}Um, I think I just kinda, I, while I evaluated it, I kind of just forgot about it. Um, I think I, I don't, I don't think I normally use, like, if I were, if I was to do something like that, I think I would, I would go V, uh, like, use an index variable itself. And then, um, if I wanted to, I would assign it to, to the last, use the last element here, and then the index, {\*\bkmkstart Snippet Value Judgement:43733&Admin%^PhhGLBdTf-000¦This implies that the snippet is somehow not "normal" }I would just decrement normally as opposed to using the last element of the array as an index.{\*\bkmkend Snippet Value Judgement:43733&Admin%^PhhGLBdTf-000¦This implies that the snippet is somehow not "normal" }\li0\fi0\ri0\sb0\sa0\ql\vertalt  I think that's where the confusing part is for me or where the, where it tripped me up a little bit.{\*\bkmkend Attribution of Confusion:43566&Admin%^bPRexbGFe-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Alternative Idioms:43566&Admin%^hE5rNs1bU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Would Have Written it Differently:43733&Admin%^bfEETrMfF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        44:05          Okay. And then just one last year you were sort of proposing a different way that you might write the same thing. And can you say why you would use like a separate index variable?\par
\plain\fs26\cf0\cb0{\*\bkmkstart Ambiguous Readability:43733&Admin%^VvyMjuXsK-000¦}\par
\plain\fs26 Subject:            44:15          I think it would be more readable. Um, and that that's mostly it. I think, uh, um, it's, it's easier to predict the, you don't have to think about whether, like three minus this last element that's also getting decremented. \cf0\cb0{\*\bkmkstart Cognitive Load:43566&Admin%^l27FvFo3q-000¦}It's a lot to keep track of{\*\bkmkend Cognitive Load:43566&Admin%^l27FvFo3q-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , um, that a computer doesn't really have a problem with. But if you're, if you're just looking at a couple of lines of code, my, my, um, intuition when I'm writing is that it should be at, you could understand it if it's not really complicated and you should be able to understand it, like at a glance, {\*\bkmkstart Top-down comprehension:43733&Admin%^y0mcuI52r-000¦}I'm at least given the general structure of it. So that's why I, I think I would use an index.{\*\bkmkend Ambiguous Readability:43733&Admin%^VvyMjuXsK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Top-down comprehension:43733&Admin%^y0mcuI52r-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        44:57          Okay, cool. Um, is there anything else you want to say or ask about this?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:01          Uh, no, I don't think so.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:02          Okay. Um, well yeah, it turns out you got it right.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:04          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:05          So unless that changes your wanting to ask a question.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:09          No, no, I don't think so.\cf0\cb0{\*\bkmkend Snippet - 85:43768&Admin%LmlbyHwdYD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:11          Okay, cool. Well that's pretty much it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:15          All right.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:15          Um, so now, um, we can talk about sort of the whole thing, like why we're doing this study and whatnot. I'll also turn off the uh, the recorder unless you want to be recorded more.\cf0\cb0{\*\bkmkend Section - Discussion:43748&Admin%^2MmnrEQZI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
}}
{\rtf1\ansi\deff0\uc1\ansicpg1252\deftab720{\fonttbl{\f0\fnil\fcharset1 Arial;}{\f1\fnil\fcharset2 Wingdings;}{\f2\fnil\fcharset2 Symbol;}}{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue255;\red128\green0\blue128;\red128\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;\red0\green128\blue128;\red0\green0\blue128;\red255\green255\blue255;\red192\green192\blue192;\red128\green128\blue128;\red0\green0\blue0;}\wpprheadfoot1\paperw12240\paperh15840\margl1880\margr1880\margt1440\margb1440\headery720\footery720\ftnbj\sftnbj\sftnrstcont\nocolbal\sftnnar\saftnnar\fet0\endnhere\sectdefaultcl{\*\generator WPTools_7.270-PRM;}{\plain\fs26\cf0\cb0{\*\bkmkstart Section - Evaluation:43748&Admin%^CgE0wMXd0-000¦}Interviewer:        00:00          If you could just say whether or not you're being, you're okay with being audio recorded?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:03          Yeah, I'm okay with you audio recording this conversation.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:07          Great. Thank you. Then we can get started. So the first thing I'll ask you to do for each of these is just write down the time which should it be displayed right there.\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Subject:            00:20          1:59?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:21          Exactly. Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            00:23          Okay,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:24          Cool.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        00:31          So if you can just say how loud.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 79:43748&Admin%^cUxQdJcoH-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^0frG3II3k-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^ZV9NFQ40y-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^7Ay3kanfI-000¦}{\*\bkmkstart Logic as Control Flow Atom:43748&Admin%^tKqtvbqNa-000¦}Subject:            00:33          [Snippet 79] So now I'm looking at two variables V1 and V2 which are assigned the values one and three and {\*\bkmkstart Incorrect Semantics:43566&Admin%^j3afCergt-000¦In addition to failing to see the short-circuiting the participant also mistakenly thought that (V2 = 3; ++V2) would leave V2 with the value of 3. Perhaps this is because V2 feels like it should contain the value 2? }{\*\bkmkstart Correct for Wrong Reasons:43733&Admin%^IpcxNUD6m-000¦By accidentally believing the incremented value of V2 was 3 AND missing the short-circuit, the two errors canceled out and the participant briefly had the wrong answer before fixing one, but not both, of these errors. }{\*\bkmkstart Logic as Control Flow Atom:43566&Admin%^Z2YhAaIx5-000¦}within the if-statement I see that they're being incremented this pre-increment operator and that's an Or statement. And it shouldn't matter. {\*\bkmkstart Remember:43581&Admin%^X9jZuHARk-000¦}So as far as I remember, pre-increment is before the statement is executed, the values will be incremented.{\*\bkmkend Logic as Control Flow Atom:43566&Admin%^Z2YhAaIx5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43581&Admin%^X9jZuHARk-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So according to this V1 should become two and V2 should become three{\*\bkmkend Correct for Wrong Reasons:43733&Admin%^IpcxNUD6m-000¦By accidentally believing the incremented value of V2 was 3 AND missing the short-circuit, the two errors canceled out and the participant briefly had the wrong answer before fixing one, but not both, of these errors. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43566&Admin%^j3afCergt-000¦In addition to failing to see the short-circuiting the participant also mistakenly thought that (V2 = 3; ++V2) would leave V2 with the value of 3. Perhaps this is because V2 feels like it should contain the value 2? }\li0\fi0\ri0\sb0\sa0\ql\vertalt  and then{\*\bkmkstart Correct Semantics:43566&Admin%^VsVoF2jAz-000¦}{\*\bkmkstart Correct for Wrong Reasons:43566&Admin%^jbJxIckrP-000¦Participant stated earlier that they wanted to incrment V2, and later upon double checking DOES increment V2. In this moment it appears to be a lapse, perhaps caused by working-memory issues. } V1 become four and V2 become s a three. Three is nine I think. Yeah, and percentage d's will give out four and nine{\*\bkmkend Correct for Wrong Reasons:43566&Admin%^jbJxIckrP-000¦Participant stated earlier that they wanted to incrment V2, and later upon double checking DOES increment V2. In this moment it appears to be a lapse, perhaps caused by working-memory issues. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43566&Admin%^VsVoF2jAz-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Double Check:43566&Admin%^QpyOPEXj5-000¦}So let me see. Let me check again.{\*\bkmkend Double Check:43566&Admin%^QpyOPEXj5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  One increments. {\*\bkmkstart Caught Own Mistake Before Prompted:43733&Admin%^q2gAVL4Kv-000¦Incidentally by catching one, but not both, of their mistakes, the particpant went from being right for the wrong reasons, to simply being wrong. }{\*\bkmkstart Incorrect Semantics:43566&Admin%^ydIAE6TBX-000¦}Three, oh, three increments to four{\*\bkmkend Caught Own Mistake Before Prompted:43733&Admin%^q2gAVL4Kv-000¦Incidentally by catching one, but not both, of their mistakes, the particpant went from being right for the wrong reasons, to simply being wrong. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . V1 multiplied by two is four and V2 multiple by 3 is 12, so yeah, the answer would be four and 12{\*\bkmkend Incorrect Semantics:43566&Admin%^ydIAE6TBX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And uh, do I need to write it down anyway?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        01:36          Uh, the output?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            01:37          Yes.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        01:37          Um, you can just circle it or write it in here.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            01:42          Okay.\cf0\cb0{\*\bkmkstart Sure:43566&Admin%^2jwREuMBm-000¦}{\*\bkmkstart Incorrect Semantics:43566&Admin%^OkMAhkTA1-000¦} Four and 12 this is V1 and V2 I am like, yeah, I'm positive that this should be.{\*\bkmkend Incorrect Semantics:43566&Admin%^OkMAhkTA1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Sure:43566&Admin%^2jwREuMBm-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        01:49          Okay. Great. And so after each question, I'll just ask you why, why positive? Can you explain why?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            01:57          \cf0\cb0{\*\bkmkstart Remember:43581&Admin%^cxKMokRO3-000¦}Yeah. So as far as I remembered, this is pre-increment and uh, what {\*\bkmkstart Learned by Reading Book:43566&Admin%^XM29rSjyU-000¦}I remember from what I studied is that{\*\bkmkend Learned by Reading Book:43566&Admin%^XM29rSjyU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , you know, {\*\bkmkstart Incorrect Semantics:43733&Admin%^Pxum6re47-000¦If this were true than short-circuiting would not work. }before the statement is executed, this will be incremented and then the, if condition is just an or value of both of these which are positive values{\*\bkmkend Incorrect Semantics:43733&Admin%^Pxum6re47-000¦If this were true than short-circuiting would not work. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43581&Admin%^cxKMokRO3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So it should go inside the loop and these arithmetic should kind of work and then according to that it should be this. {\*\bkmkstart Paranoia:43733&Admin%^mHprl2EMV-000¦}But yeah,{\*\bkmkstart Unsure:43566&Admin%^z00A8KfG3-000¦}{\*\bkmkstart Sure:43566&Admin%^OlckekQM8-000¦} I think I should have given this a five because I am just a little bit shaky about this, but honestly I am quite confident but yeah, of course there is always a chance I might be wrong.{\*\bkmkend Sure:43566&Admin%^OlckekQM8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43566&Admin%^z00A8KfG3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So yeah, that's four and 12.{\*\bkmkend Paranoia:43733&Admin%^mHprl2EMV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        02:34          So what's the thing that you might be shaky about?\par
\pard\plain\plain\fs26\par
\plain\fs26{\*\bkmkstart Apparent Contradiction:43733&Admin%^hy5JmdLPf-000¦The position of the incrementation in the flow of execution would not affect the output of this code. If both pre-increments were changed to post-increments the output would be the same. }Subject:            02:37         {\*\bkmkstart Pre-increment Atom:43566&Admin%^YZiSwEJTQ-000¦Participant is expressing unfamiliarity with the pre-increment operator, despite understanding the core of its semantics. }\cf0\cb0  It is about the, you know? First thing being, if I'm right about, I know that these are pre-increment and I recall that, you know, before the statement is executed, they're incremented. So I just, I think I am like that, but that is, that is a scope that I might go wrong if at all, I like that might be the place.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        02:56          So it's whether or not on the increment happens\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            02:59          before the execution or not.{\*\bkmkend Pre-increment Atom:43566&Admin%^YZiSwEJTQ-000¦Participant is expressing unfamiliarity with the pre-increment operator, despite understanding the core of its semantics. }\li0\fi0\ri0\sb0\sa0\ql\vertalt\cf0\cb0{\*\bkmkend Apparent Contradiction:43733&Admin%^hy5JmdLPf-000¦The position of the incrementation in the flow of execution would not affect the output of this code. If both pre-increments were changed to post-increments the output would be the same. }\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:00          Gotcha. Yeah. Okay, great. Yeah, that's, that's excellent. Thank you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:03          Okay. So you need?\cf0\cb0{\*\bkmkend Logic as Control Flow Atom:43748&Admin%^tKqtvbqNa-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Wrong:43748&Admin%^7Ay3kanfI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^ZV9NFQ40y-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^0frG3II3k-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 79:43748&Admin%^cUxQdJcoH-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 109:43748&Admin%^hgHDGJBDr-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^8vgOtoIBm-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^A5eCQO9qC-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^OQ8grxQdE-000¦}{\*\bkmkstart Omitted Curly Braces Atom:43748&Admin%^KoPBBhvBt-000¦}Interviewer:        03:05          [Snippet 109] So you can take this one. We can move on to the next. Oh we should have written the end time. But that's not important uh, for this one though, we should write what time it starts right there.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:18          So that's 2:02?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:20          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:21         \cf0\cb0{\*\bkmkstart Omitted Curly Braces Atom:43566&Admin%^JACn0usuu-000¦} And I see this program V1 is given two and there's an if statement which has the {\*\bkmkstart Correct Semantics:43566&Admin%^OI9YJ8L5z-000¦}{\*\bkmkstart Boolean Value of Integer:43566&Admin%^m59U5bP6V-000¦}condition as zero that is false{\*\bkmkend Boolean Value of Integer:43566&Admin%^m59U5bP6V-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43566&Admin%^OI9YJ8L5z-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . And then it would go to V1 plus plus. So it will be three the output will be three.{\*\bkmkstart Sure:43566&Admin%^7DHcj4Nja-000¦} And I'm pretty positive about this{\*\bkmkend Sure:43566&Admin%^7DHcj4Nja-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Few things:43566&Admin%^Mp9nvUwwL-000¦}Like that is nothing to think about{\*\bkmkend Few things:43566&Admin%^Mp9nvUwwL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  if, yeah,{\*\bkmkstart Correct Semantics:43566&Admin%^NdB9UlBLP-000¦} this condition fails and this one will be incremented{\*\bkmkend Correct Semantics:43566&Admin%^NdB9UlBLP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Omitted Curly Braces Atom:43566&Admin%^JACn0usuu-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        03:45          Okay. Um, so you sort of explained your confidence. Is there anything else you want to say about why six?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            03:51          No, I, no no there is nothing else. I think this is pretty straightforward actually.\cf0\cb0{\*\bkmkend Omitted Curly Braces Atom:43748&Admin%^KoPBBhvBt-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^OQ8grxQdE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^A5eCQO9qC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^8vgOtoIBm-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 109:43748&Admin%^hgHDGJBDr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 55:43748&Admin%^XU5Tb3F0e-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^0yKxQOH7O-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^ynHSZcTSw-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^hMwB9t6QU-000¦}{\*\bkmkstart Arithmetic as Logic Atom:43748&Admin%^gqHmeICCk-000¦}Interviewer:        03:57          [Snippet 55] Okay, great. Thank you. Okay. So the current time, 2:03\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            04:05          Current time is 2:03 and I see that V1 is assigned to zero, V2 to eight and there is an if condition which will be evaluated. \cf0\cb0{\*\bkmkstart Arithmetic as Logic Atom:43566&Admin%^TwsuPXwGf-000¦}And {\*\bkmkstart Correct Semantics:43566&Admin%^SEY6jQvlo-000¦}{\*\bkmkstart Sure:43566&Admin%^Eb5sjtDqn-000¦}V2 minus eight minus three, star seven minus eight. So yup, what I would expect of this is five minus one is less than. So this will go here V1 is assigned four and it will be, yup it'll be four, V1 will be four. And this also, I'm pretty sure about because you know, if it's looking for the uh, you know its looking for a condition where here it is true because this will evaluate to evaluate to a value which is less than zero and hence it will enter this{\*\bkmkend Arithmetic as Logic Atom:43566&Admin%^TwsuPXwGf-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Sure:43566&Admin%^Eb5sjtDqn-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43566&Admin%^SEY6jQvlo-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . Uh, yeah, this code block and V1 will be assigned four and that is what will be displayed.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        05:09          Okay. Yeah. That makes a lot of sense. All right, thanks. Oh, and the time\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            05:17          You need the end time also? I did write the start time.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        05:20          Yeah you did. Um, it's best to write the end for you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            05:24          Alright. Sure I can do that for you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        05:24          It's fine.\cf0\cb0{\*\bkmkend Arithmetic as Logic Atom:43748&Admin%^gqHmeICCk-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^hMwB9t6QU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^ynHSZcTSw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^0yKxQOH7O-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 55:43748&Admin%^XU5Tb3F0e-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 71:43748&Admin%^fqBTF6P9U-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^j2M4CNMDp-000¦}{\*\bkmkstart Confidence - 5:43748&Admin%^jsobvIoUZ-000¦}{\*\bkmkstart Answer - Wrong:43748&Admin%^2a4ywQNQk-000¦}{\*\bkmkstart Preprocessor in Statement Atom:43748&Admin%^bxp3ds6lb-000¦}Subject:            05:31          [Snippet 71] I start this at 2:05 and V1 as assigned as one V2 as two. And this is an if, if V1 is less than V2. {\*\bkmkstart Preprocessor in Statement Atom:43567&Admin%^61mOId0SA-000¦}You want to define something? Alright. And in this case it will go there M1 to be okay M1 and M2 one or two. {\*\bkmkstart Unsure:43734&Admin%^V8e0I4pN1-000¦}What I'm not sure about in this is {\*\bkmkstart Convention:43566&Admin%^mQwVteSBg-000¦}I have typically always used, {\*\bkmkstart Non-standard terminology:43566&Admin%^Hv106Bf6O-000¦Hash-define rather than Macro, or even "constant" }hash-defines{\*\bkmkend Non-standard terminology:43566&Admin%^Hv106Bf6O-000¦Hash-define rather than Macro, or even "constant" }\li0\fi0\ri0\sb0\sa0\ql\vertalt  before, you know, before the program starts{\*\bkmkend Convention:43566&Admin%^mQwVteSBg-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43734&Admin%^V8e0I4pN1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Not Previously Written:43567&Admin%^tfN4gIjCd-000¦}This something that I haven't done ever{\*\bkmkend Not Previously Written:43567&Admin%^tfN4gIjCd-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and {\*\bkmkstart Relying on Correctness of Example:43567&Admin%^w3F65Jzg8-000¦}but I read in the brochure that this compiles. So if it compiles I don't think there should be a problem and the assignment should be all right. Just in case I not too sure about this statement being inside the main.{\*\bkmkend Relying on Correctness of Example:43567&Admin%^w3F65Jzg8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Not Previously Seen:43567&Admin%^7KhAYg4Ug-000¦}Not that it shouldn't matter but I haven't seen this before{\*\bkmkend Not Previously Seen:43567&Admin%^7KhAYg4Ug-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So yeah this would be one and two. Sorry. Oh yeah. {\*\bkmkstart Incorrect Semantics:43567&Admin%^KLYuENQxM-000¦}M1 is one and then yeah, this should be one and two M1 is one M2 is two.{\*\bkmkend Incorrect Semantics:43567&Admin%^KLYuENQxM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Preprocessor in Statement Atom:43567&Admin%^61mOId0SA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  Okay, great. What, uh, the end time being? 2:06?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        06:33          Yeah. Okay. Excellent. Okay.\cf0\cb0{\*\bkmkend Preprocessor in Statement Atom:43748&Admin%^bxp3ds6lb-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Wrong:43748&Admin%^2a4ywQNQk-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 5:43748&Admin%^jsobvIoUZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^j2M4CNMDp-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 71:43748&Admin%^fqBTF6P9U-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 62:43748&Admin%^QCXEkF52n-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^a8arP8Eyc-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^DKkm27SJz-000¦}{\*\bkmkstart Confusingness - Transformation:43748&Admin%^oH8KIMdgB-000¦}{\*\bkmkstart Comma Operator Transformation:43748&Admin%^nMrZ6hMqw-000¦}Subject:            06:43          [Snippet 62] 2:06. {\*\bkmkstart Uninitialized:43567&Admin%^46544IQb6-000¦}And I see V1, V2 not initialized initially{\*\bkmkend Uninitialized:43567&Admin%^46544IQb6-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and V1 assigned two. V2 assigned one and yeah, not a problem. V1 is two V2 is one and this is pretty sure that this should be the answer.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        07:01          Okay, good. Is there anything else you want to clarify about your?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:04          \cf0\cb0{\*\bkmkstart Uninitialized:43734&Admin%^a9iJdun2Q-000¦}Uh, no. {\*\bkmkstart Convention:43567&Admin%^aXjqJr4Qj-000¦}{\*\bkmkstart Would Have Written it Differently:43734&Admin%^MzNHTZLkN-000¦}Typically I like to initialize if possible the variables{\*\bkmkend Would Have Written it Differently:43734&Admin%^MzNHTZLkN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Convention:43567&Admin%^aXjqJr4Qj-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  but it's fine. I'm pretty sure they will not be any junk because we are assigning values right there.{\*\bkmkend Uninitialized:43734&Admin%^a9iJdun2Q-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:14          Yeah, it's. Yeah, it's good. V1 and V2 is two and one. Yes.{\*\bkmkend Comma Operator Transformation:43748&Admin%^nMrZ6hMqw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\cf0\cb0{\*\bkmkend Confusingness - Transformation:43748&Admin%^oH8KIMdgB-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^DKkm27SJz-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^a8arP8Eyc-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 62:43748&Admin%^QCXEkF52n-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 49:43748&Admin%^gThrYKAcS-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^In8VbdQcv-000¦}{\*\bkmkstart Confidence - 5:43748&Admin%^UxxAi4xw6-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^w38kXXGsX-000¦}{\*\bkmkstart Conditional Operator Atom:43748&Admin%^2dPigtJ0Q-000¦}\par
\plain\fs26 Interviewer:        07:20          [Snippet 49] Okay, great. Two more.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:28          It's 2:06 and I didn't, I did put that.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        07:32          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:32          So V1 is assigned to zero. V2 is. Okay. V2 equals V1 double equals.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            07:43          So... \cf0\cb0{\*\bkmkstart Questioning Program Validity:43567&Admin%^tGBkTNPZw-000¦}{\*\bkmkstart Relying on Correctness of Example:43734&Admin%^T9331j6My-000¦}These all compile, right?{\*\bkmkend Relying on Correctness of Example:43734&Admin%^T9331j6My-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Questioning Program Validity:43567&Admin%^tGBkTNPZw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  That's for sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        07:48          Mhmm.\par
\pard\plain\plain\fs26\par
\plain\fs26{\*\bkmkstart Parenthesis:43731&Admin%^xlxmJMhVV-000¦}Subject:            07:48          Okay. \cf0\cb0{\*\bkmkstart Convention:43567&Admin%^V5OSpPJVZ-000¦}{\*\bkmkstart Ambiguous Readability:43734&Admin%^xto40JQIN-000¦}{\*\bkmkstart Snippet Value Judgement:43567&Admin%^26eQ2kOQk-000¦}So I'd expect that this operator would have like you know it would have been better for me if there were parentheses around these for me to understand{\*\bkmkend Snippet Value Judgement:43567&Admin%^26eQ2kOQk-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Ambiguous Readability:43734&Admin%^xto40JQIN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Convention:43567&Admin%^V5OSpPJVZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Parenthesis:43731&Admin%^xlxmJMhVV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            08:01          and\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            08:09          Well, \cf0\cb0{\*\bkmkstart Operator Precedence Atom:43567&Admin%^P5vCn65sJ-000¦This atom was unintentionally included, and is the source for an almost error in a snippet testing a different atom }{\*\bkmkstart Conditional Operator Atom:43567&Admin%^iYww5UNId-000¦}I can only make sense of this hold on, {\*\bkmkstart Unsure:43567&Admin%^ITp5kmYKQ-000¦}so {\*\bkmkstart Boolean Value of Integer:43567&Admin%^KYKdoKc6E-000¦}three is true{\*\bkmkend Boolean Value of Integer:43567&Admin%^KYKdoKc6E-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  so I get two V1 double equals 2 but it does not. I am not really sure of how this will actually play out.{\*\bkmkend Conditional Operator Atom:43567&Admin%^iYww5UNId-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Operator Precedence Atom:43567&Admin%^P5vCn65sJ-000¦This atom was unintentionally included, and is the source for an almost error in a snippet testing a different atom }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43567&Admin%^ITp5kmYKQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            08:30          \cf0\cb0{\*\bkmkstart Caught Own Mistake Before Prompted:43567&Admin%^gtX0V0kbh-000¦}{\*\bkmkstart Sure:43567&Admin%^ll7kVM0Au-000¦}Oh, I see. I think I misinterpreted this. {\*\bkmkstart Correct Semantics:43567&Admin%^CPCRkXbkr-000¦}So V2 equals to whatever, if V1 equals to three. So V1 is not equal to three, false statement for V2 will be assigned four and yeah, that's it.{\*\bkmkend Correct Semantics:43567&Admin%^CPCRkXbkr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So it's 2:08 and yeah {\*\bkmkstart Snippet Value Judgement:43567&Admin%^9sjglY9RD-000¦}parentheses would have been better{\*\bkmkend Snippet Value Judgement:43567&Admin%^9sjglY9RD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and {\*\bkmkstart Sure:43567&Admin%^QQsQPoVjx-000¦}I am confident, like, pretty confident about this.{\*\bkmkend Sure:43567&Admin%^ll7kVM0Au-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Caught Own Mistake Before Prompted:43567&Admin%^gtX0V0kbh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Sure:43567&Admin%^QQsQPoVjx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        08:55          Okay. Can you explain why?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Relying on Correctness of Example:43734&Admin%^IxdSklaV0-000¦}Subject:            08:56          {\*\bkmkstart Uncommon pattern:43734&Admin%^SIaJDEdwO-000¦}Why five? Yeah. I'm not too comfortable with the way it is, uh, {\*\bkmkstart Convention:43567&Admin%^Mabarb5bY-000¦}it's not typical that we have conditions or you know, just like this{\*\bkmkend Convention:43567&Admin%^Mabarb5bY-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Uncommon pattern:43734&Admin%^SIaJDEdwO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  I like to see them, you know, I don't know if this. Of course you say that this compiled, {\*\bkmkstart Would Have Written it Differently:43567&Admin%^gxVttM4V8-000¦}but I wouldn't do it like this so I'm not too confident about it when it is written like this. I'd prefer if there were, it's just that I'm not too concerned about the output. I have no reservations as such. But yeah, I'm pretty sure that if this works it should be four. Okay,{\*\bkmkend Would Have Written it Differently:43567&Admin%^gxVttM4V8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Relying on Correctness of Example:43734&Admin%^IxdSklaV0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Conditional Operator Atom:43748&Admin%^2dPigtJ0Q-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^w38kXXGsX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 5:43748&Admin%^UxxAi4xw6-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^In8VbdQcv-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 49:43748&Admin%^gThrYKAcS-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 91:43748&Admin%^pQpb7aZLR-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^0c4zoYneV-000¦}{\*\bkmkstart Confusingness - Atom:43748&Admin%^MQtgHstSa-000¦}{\*\bkmkstart Confidence - 4:43748&Admin%^rHp6gulSE-000¦}{\*\bkmkstart Reversed Subscripts Atom:43748&Admin%^HFxRkKctX-000¦}Interviewer:        09:27          [Snippet 91] I see. Okay, great. Thank you. Okay. I believe this is the last one and then we'll have you do sort of a survey and then after the survey we can come back and we can discuss all of these. The time is 2:09.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            09:53          Okay. \cf0\cb0{\*\bkmkstart Correct Semantics:43567&Admin%^beQFjSgK5-000¦}Char of V2. Oh, alright. Second index, zero, one, two. E, E would be what it is. Yep. The output would be E because we are looking at the second index: zero, one, two. {\*\bkmkstart Ambiguous Readability:43734&Admin%^eaL1eFqtM-000¦}{\*\bkmkstart Uncommon pattern:43734&Admin%^oQQ8ubuQP-000¦}Yeah. Very peculiar way of writing it but yeah, it would have been much better and easier for me to get if it was not written this way around. But yeah, this would be E.{\*\bkmkend Correct Semantics:43567&Admin%^beQFjSgK5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Uncommon pattern:43734&Admin%^oQQ8ubuQP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Ambiguous Readability:43734&Admin%^eaL1eFqtM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\cf0\cb0\par
\plain\fs26 Interviewer:        10:30          Okay. And what's your confidence?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            10:32          \cf0\cb0{\*\bkmkstart Not Previously Written:43734&Admin%^Vjk0E1ppg-000¦}My confidence on this is since I have not used it specifically, but{\*\bkmkstart Visual Reference:43734&Admin%^gSXfAlY1P-000¦} I know that we can do this sort of stuff like you know, you can reference this in this manner if ar, array was an array [referring to his handwritten note "2[arr] or arr[2]"], I can either do this or this and I'll end up at the same result{\*\bkmkend Visual Reference:43734&Admin%^gSXfAlY1P-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So on those basis I think it should be this and I'm like a four because I haven't done it like this.{\*\bkmkend Not Previously Written:43734&Admin%^Vjk0E1ppg-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        10:56          So. So if you haven't done it, um, how were you aware of that?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            11:01          \cf0\cb0{\*\bkmkstart Learned from Class:43567&Admin%^zqwtCw7V5-000¦}I have seen it on some of the class material once where, you know, that was, you know, professor was just going through it and he said that this or that wouldn't matter.{\*\bkmkend Learned from Class:43567&Admin%^zqwtCw7V5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Apparent Contradiction:43567&Admin%^GL8xOJLBv-000¦Earlier they said they hadn't tried this, but here they specifically said they did try it. Perhaps the uncertainty comes from not understanding the relationship between strings and arrays. }And I, I did try it with an int because I just wanted to check to be sure, it did work, but you know, I kind of initialized an array before and then I tried it like this with the index and the, you know, base pointer{\*\bkmkend Apparent Contradiction:43567&Admin%^GL8xOJLBv-000¦Earlier they said they hadn't tried this, but here they specifically said they did try it. Perhaps the uncertainty comes from not understanding the relationship between strings and arrays. }\li0\fi0\ri0\sb0\sa0\ql\vertalt , {\*\bkmkstart Strings as Pointers/Arrays:43567&Admin%^znguVkXP8-000¦}but I haven't done that with strings{\*\bkmkend Strings as Pointers/Arrays:43567&Admin%^znguVkXP8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Relying on Correctness of Example:43567&Admin%^kswTngawF-000¦}But assuming this compiles{\*\bkmkend Relying on Correctness of Example:43567&Admin%^kswTngawF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , this would be the logical way out of it given zero-based indexing. Uh, the second index will be zero one to E.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:38          I see. And can I also ask what class that was in?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            11:44          It was an operating systems class.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:46          I see. Okay, cool. Um, thank you. Uh, so that, that's it for the sort of answering the questions.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            11:52          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:54          So I'll ask that. Oh No, I'm sorry.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            11:57          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        11:58          Ah, I lied to you, there's one more.\cf0\cb0{\*\bkmkend Reversed Subscripts Atom:43748&Admin%^HFxRkKctX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 4:43748&Admin%^rHp6gulSE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confusingness - Atom:43748&Admin%^MQtgHstSa-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^0c4zoYneV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 91:43748&Admin%^pQpb7aZLR-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 56:43748&Admin%^QRcujuVNC-000¦}{\*\bkmkstart Arithmetic as Logic Transformation:43748&Admin%^lhcZyKZZs-000¦}{\*\bkmkstart Answer - Right:43748&Admin%^HslMEELr0-000¦}{\*\bkmkstart Confidence - 6:43748&Admin%^yZ3Dn2uBd-000¦}{\*\bkmkstart Confusingness - Transformation:43748&Admin%^Ld65X4a4G-000¦}Subject:            12:02          [Snippet 56] Ahh, it's okay. The time is? 2:11\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        12:02          2:11. Alright\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            12:05          So V1 is assigned zero and V2 is assigned six. If one is less-than equal to V2. \cf0\cb0{\*\bkmkstart Short-circuiting:43567&Admin%^8cIdI583u-000¦}{\*\bkmkstart Apparent Contradiction:43567&Admin%^K0Hnm3t3t-000¦Participant understands logical short-circuiting here, but didn't understand it earlier when they believed ++x would execute in a short-circuited branch. Perhaps the difference is side-effects vs primary values? }One is less than equal to V2, one is less than equal to V2, this is true so it will execute no matter.{\*\bkmkend Apparent Contradiction:43567&Admin%^K0Hnm3t3t-000¦Participant understands logical short-circuiting here, but didn't understand it earlier when they believed ++x would execute in a short-circuited branch. Perhaps the difference is side-effects vs primary values? }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43567&Admin%^8cIdI583u-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  So it enters V1 equals to two. So yeah, V1 is two and {\*\bkmkstart Sure:43567&Admin%^wrPllH1dA-000¦}pretty confident about it.{\*\bkmkend Sure:43567&Admin%^wrPllH1dA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        12:27          And why that, why that confidence level?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            12:30          Because if condition, \cf0\cb0{\*\bkmkstart Short-circuiting:43567&Admin%^ip2yPgO6E-000¦Although this passage might imply that the participant doesn't understand the sequential nature of short-circuiting, just that an or-gate succeeds based on an individual true operand. }if one of the conditions passes it will enter irrespective of the other one{\*\bkmkend Short-circuiting:43567&Admin%^ip2yPgO6E-000¦Although this passage might imply that the participant doesn't understand the sequential nature of short-circuiting, just that an or-gate succeeds based on an individual true operand. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . And then this is the assignment,{\*\bkmkend Confusingness - Transformation:43748&Admin%^Ld65X4a4G-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Confidence - 6:43748&Admin%^yZ3Dn2uBd-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Answer - Right:43748&Admin%^HslMEELr0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Arithmetic as Logic Transformation:43748&Admin%^lhcZyKZZs-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 56:43748&Admin%^QRcujuVNC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Section - Evaluation:43748&Admin%^CgE0wMXd0-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Section - Survey:43748&Admin%^Hc7z2YJox-000¦}Interviewer:        12:39          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        12:45          Okay, great. Um, thank you, and now we can actually move on to the survey. It's two pages, but go through an order.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            12:55          Yeah, sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            12:59          Do I have to say this out load?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        13:00          No, no you can just answer\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            13:02          What does this mean? Yeah. So quite understand race.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        13:45          It's whatever you want to put in there. There's no right or wrong answer if you want to skip it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            13:50          Yeah I would like to skip it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        13:50          Yeah, go for it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            13:53          And what is this, the number of years so far since I have completed education here?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        13:59          Umm, course of study, number of years.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:03          Or, the number of the study lasted.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        14:05          Um, if you are finished with the degree it should be how many years it took\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:09          The duration? Yeah. Yeah. And now currently I am five months into the course, the CS course that I am enrolled in. Okay. So I write five months.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        14:20          Yeah, sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:23          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        14:24          I, this whole everything here is your best.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:28          Okay. My understanding\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        14:30          Yeah, yeah, and as with the other one, if there's anything you don't want to answer it, don't answer it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:34          Sure. And uh, just to be sure this one [question 5] is in all of my education or in any particular university?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        14:45          Everything above high school.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            14:49          Everything above high School. All right.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:03          I have worked for a couple of years in between. So I have seen a pretty huge code base actually. So that, I dunno, I don't even know how long, how big that might have been. Any particular range that you're looking at? 10,000 lines?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:19          Yeah. Just your best guests. If 10,000 lines is your best guess...\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:23          Yeah, I think it'd be any where around a lakh. And this is obviously a ballpark figure. I don't know because you know, it was a legacy product in c plus plus.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:34          What does that say?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:34          Roughly how many lines of code was the entire code base?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:38          What does that say? [Question 9]\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:39          One Lakh lines of code\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:41          Lakh?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:42          Yeah, a lakh... One thousand, ten thousand, fifty thousand, one Lakh.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:48          Oh, 100,000 thousand.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:53          Yes! Oh, sorry! That's a cultural difference.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        16:53          Oh yes, I'm just going to write that, I've never heard lack before, but that's good. Good to know. Thank you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            16:57          No problem. So I would have written around at most a thousand lines. That's again a ballpark figure of course.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        17:07          Yeah, that's totally fine.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            17:07          You know, I think this is actually a lot. I think it would be somewhere around 500. That would be, because you know it was a XXX product and I was not developing it actively. I was doing code fixes and enhancements, but enhancements were obviously on the features. So it would not be more than 500. Yeah, that's okay. I would say I am. Okay. Second year programming students who are the second year program and students undergrads, second year programming students?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        17:42          People who have, it's their second year of learning to program.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            17:45          I wouldn't be too cocky about it, but professional programmers, yeah, maybe I can be better. This is about it?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            17:55          Um, and then the last one, I'll take this one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            20:15          Yeah. I think this is pretty much. I think it has colored everything. That's great. Yep. Okay, excellent.\cf0\cb0{\*\bkmkend Section - Survey:43748&Admin%^Hc7z2YJox-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Section - Discussion:43748&Admin%^ffdQr6OSZ-000¦}Interviewer:        20:24          Um, so now if we can just go back through and talk about\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            20:27          Please\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        20:28          the questions. Um so we'll just start with the first one. And the first thing I always like to ask these questions is, um, is there any question that you have about the code or your answer or anything?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 79:43768&Admin%eTXHXCLeQR-000¦}Subject:            20:42          [Snippet 79] No, I'd like to know what is the right answer.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        20:46          That is a good question. Okay. So, um, before we get into the right answer, you had pointed out in this one that you wrote, you wrote, you'd written entirely positive but you had also expressed a little bit of.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:06          \cf0\cb0{\*\bkmkstart Unsure:43567&Admin%^7Q1NsBXxw-000¦}So I jumped to this pretty quickly, but then you know, in retrospect of thinking about it, I should not have given it a six. If I can change, I'd go back to a four{\*\bkmkend Unsure:43567&Admin%^7Q1NsBXxw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:16          Oh actually, I want to give you a red pen instead of a black one so you can go ahead and write anything you want now.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:25          So yeah, I would be more four because of course, like I told you, I was, you know, \cf0\cb0{\*\bkmkstart Evaluation Order:43740&Admin%^2NtwB2QKM-000¦}I had my {\*\bkmkstart Unsure:43579&Admin%^P4c2ZqD0r-000¦}{\*\bkmkstart Pre-increment Atom:43579&Admin%^4YGLuju72-000¦}doubts about the pre-increments that it would be before or after.{\*\bkmkend Pre-increment Atom:43579&Admin%^4YGLuju72-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^P4c2ZqD0r-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Evaluation Order:43740&Admin%^2NtwB2QKM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:33          Hold on to that one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:35          You want me to, well,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:38          I just don't want you to get the urge to write with the black one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:40          Oh yeah, sure. But no problem.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        21:41          But sorry, continue.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            21:42          \cf0\cb0{\*\bkmkstart Apparent Contradiction:43740&Admin%^gQoueLuiL-000¦Participant appears to know the construct is a "pre"-increment, which implies they should know the increment happens first, but they claim not to. }Oh, that's about it.{\*\bkmkstart Evaluation Order:43740&Admin%^7d3IlQHSC-000¦} So I was thinking about it so, the {\*\bkmkstart Pre-increment Atom:43579&Admin%^TKz6o0mRG-000¦}{\*\bkmkstart Unsure:43579&Admin%^fYi5OpoGi-000¦}{\*\bkmkstart Not Previously Written:43579&Admin%^Y44Q4577k-000¦}pre-increment before the statement executes or after.{\*\bkmkend Evaluation Order:43740&Admin%^7d3IlQHSC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Apparent Contradiction:43740&Admin%^gQoueLuiL-000¦Participant appears to know the construct is a "pre"-increment, which implies they should know the increment happens first, but they claim not to. }\li0\fi0\ri0\sb0\sa0\ql\vertalt  So I know that it is, but I am just not sure I have not used this kind of thing.{\*\bkmkend Not Previously Written:43579&Admin%^Y44Q4577k-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^fYi5OpoGi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Pre-increment Atom:43579&Admin%^TKz6o0mRG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Sure:43579&Admin%^VMjQjTHEQ-000¦}{\*\bkmkstart Previously Used:43579&Admin%^zm3QQB3nn-000¦}{\*\bkmkstart Quote:43740&Admin%^Ttm0lQFL3-000¦}I usually am very confident about the things that I have coded at a point of time{\*\bkmkend Previously Used:43579&Admin%^zm3QQB3nn-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Sure:43579&Admin%^VMjQjTHEQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Quote:43740&Admin%^Ttm0lQFL3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Double Check:43579&Admin%^yVxUkAXRi-000¦}{\*\bkmkstart Development Behavior:43579&Admin%^3fdXVBmCd-000¦}That's something that I see and{\*\bkmkstart Non-standard terminology:43740&Admin%^yAAMH5nA8-000¦"compiled output" sounds like assembly, when i think the participant really means runtime output } I always like to go back and actually see the compiled output to be very confident about it{\*\bkmkend Non-standard terminology:43740&Admin%^yAAMH5nA8-000¦"compiled output" sounds like assembly, when i think the participant really means runtime output }\li0\fi0\ri0\sb0\sa0\ql\vertalt . Otherwise I don't commit to it.{\*\bkmkend Development Behavior:43579&Admin%^3fdXVBmCd-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Double Check:43579&Admin%^yVxUkAXRi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:07          Of Course. Um, okay. \cf0\cb0{\*\bkmkstart Did Not Catch Own Mistake After Prompted:43579&Admin%^JUnDsQJ8d-000¦}So if I told you that, um, that the plus plus before variable first incremented the variable and then reported the value then would you say that this is the right output? Does that change your output?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            22:26          No, it doesn't. I would stick to the output\cf0\cb0{\*\bkmkend Did Not Catch Own Mistake After Prompted:43579&Admin%^JUnDsQJ8d-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , but yeah, obviously a validation would only be if you tell me what is the right answer.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:32          Sure. Okay. Um, so\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        22:39          I guess I only have one more question which is, um, can you walk me through at the smallest step, what happens in the if statement knowing that, um, that you are correct that the increment happens first?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            22:56          Okay.\cf0\cb0{\*\bkmkstart Remember:43581&Admin%^JqP4iaJHf-000¦} So as far as I remember, so if I will, you know, this executes and I will, this will be incremented, which {\*\bkmkstart Boolean Value of Integer:43579&Admin%^ib0Lxzcsv-000¦Implication is that positive values are truthy }either ways would have been positive because this is a positive value irrespective of the increment{\*\bkmkend Boolean Value of Integer:43579&Admin%^ib0Lxzcsv-000¦Implication is that positive values are truthy }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43581&Admin%^JqP4iaJHf-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So I don't mind this. So this walk through into the if statement will pass. That's what I mean to say. And then there is an or. {\*\bkmkstart Short-circuiting:43579&Admin%^8CHTKOPeQ-000¦}{\*\bkmkstart Incorrect Semantics:43579&Admin%^0i0iXal2P-000¦}Even though this is positive, it doesn't short circuit, you know it will have to evaluate both the conditions I believe so three will also go on to increment V2 will also increment because it has to be sure that it evaluates.{\*\bkmkend Incorrect Semantics:43579&Admin%^0i0iXal2P-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43579&Admin%^8CHTKOPeQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Caught Own Mistake Before Prompted:43579&Admin%^cuIvroPoi-000¦}{\*\bkmkstart Short-circuiting:43579&Admin%^OMVLZy5B5-000¦}{\*\bkmkstart Unsure:43579&Admin%^3KvaFFkNH-000¦}Oh yeah, that's actually, I didn't pay attention to that. So that can be a short circuit in the sense. I don't know if C does that or not{\*\bkmkend Unsure:43579&Admin%^3KvaFFkNH-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43579&Admin%^OMVLZy5B5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Caught Own Mistake Before Prompted:43579&Admin%^cuIvroPoi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , so{\*\bkmkstart Partially Correct Semantics:43579&Admin%^YGDF1Tch9-000¦Short-circuiting only happens left-to-right, not in the other order } if there is even one condition that passes and if it is an or. I have a feint memory that you know, It doesn't have to check the other one{\*\bkmkend Partially Correct Semantics:43579&Admin%^YGDF1Tch9-000¦Short-circuiting only happens left-to-right, not in the other order }\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Unsure:43579&Admin%^j6g7Ea1BG-000¦}{\*\bkmkstart Correct Semantics:43579&Admin%^GNrvq4x2K-000¦}So if that is the case, I don't know if C does it, if that is the case, there is a possibility that V2 is not incremented and hence this would have not, you know, V2 would have been a different answer{\*\bkmkend Correct Semantics:43579&Admin%^GNrvq4x2K-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^j6g7Ea1BG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Attention:43579&Admin%^UsEoZhLL1-000¦}{\*\bkmkstart Attribution of Confusion:43579&Admin%^GK6bJ0vKM-000¦}So yeah, we can attribute that to actually that's something that I'm thinking about right now. I didn't give it a lot of thought before.{\*\bkmkend Attribution of Confusion:43579&Admin%^GK6bJ0vKM-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attention:43579&Admin%^UsEoZhLL1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:08          Sure. Um, do you know in what cases something short circuits and what cases something doesn't short circuit.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:15         \cf0\cb0{\*\bkmkstart Remember:43581&Admin%^jvbCfRMUT-000¦} {\*\bkmkstart Short-circuiting:43579&Admin%^kaCD2U5aE-000¦}{\*\bkmkstart False Operand Causes Short-Circuit:43579&Admin%^I7I0JAmiK-000¦}{\*\bkmkstart Incorrect Semantics:43579&Admin%^3pTGgEaOa-000¦}I remember that if at all the first is false, it definitely short circuits in the sense, you know, if it is, if any condition is here be it an and or an or. If the first one fails it definitely will short-circuit.{\*\bkmkend Incorrect Semantics:43579&Admin%^3pTGgEaOa-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend False Operand Causes Short-Circuit:43579&Admin%^I7I0JAmiK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43579&Admin%^kaCD2U5aE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43581&Admin%^jvbCfRMUT-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:27          I see. Okay. Um, so, uh, right now is the first value true or false?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            24:34          \cf0\cb0{\*\bkmkstart Short-circuiting:43579&Admin%^JqjHHJ3C6-000¦}{\*\bkmkstart Incorrect Semantics:43579&Admin%^cTZ7tyqns-000¦}It's not, it's true, so it shouldn't short-circuit.{\*\bkmkend Incorrect Semantics:43579&Admin%^cTZ7tyqns-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43579&Admin%^JqjHHJ3C6-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        24:37          Okay. Shouldn't search your short circuit. Okay, cool. Um, so that's slightly inaccurate. The false true thing, um, with an and gate, if the first half is false, um, then you know, the whole and is false because false and false is false. False and true is false. So you don't need to bother with the second path. The same is not true with an or statement where, um, even if the first half is false,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:08          There is a scope that the second one might be true and it might enter.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:11          Exactly. So it can't, it can't short circuit, but if the first half is true, actually, even if you don't need to\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:18          It won't check the other part right?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:20          you don't have to because with an Or if the first half is true, the whole thing,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:23          \cf0\cb0{\*\bkmkstart Unsure:43579&Admin%^DbD1fZBC5-000¦}True, true, yes I had my doubts about that one{\*\bkmkend Unsure:43579&Admin%^DbD1fZBC5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Caught Own Mistake After Prompted:43579&Admin%^BECyO5gvV-000¦}Yeah. So in this case this one won't be executed.{\*\bkmkend Caught Own Mistake After Prompted:43579&Admin%^BECyO5gvV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:29          That is correct.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:30          Okay, yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:31          Um, so the only difference, um, between your answer and the correct answer is that um. V2 doesn't get incremented.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:39          Yeah, yeah, yeah, that makes sense, yes.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:42          Yeah. Um, but otherwise, uh, you had all of it correct? With the plus plus happening first.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:48          \cf0\cb0{\*\bkmkstart Attention:43579&Admin%^2Vryv5aIO-000¦}{\*\bkmkstart Attribution of Confusion:43579&Admin%^6EzxSFguF-000¦}{\*\bkmkstart Surprising comment:43740&Admin%^JqVeLPN8y-000¦This is a direct example of the effect of our study design on the behaviors we observe }Yeah. I didn't give it a lot of thought before. It only happened because you were insisting that I read about it, yeah, that's when it happened.{\*\bkmkend Surprising comment:43740&Admin%^JqVeLPN8y-000¦This is a direct example of the effect of our study design on the behaviors we observe }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attribution of Confusion:43579&Admin%^6EzxSFguF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attention:43579&Admin%^2Vryv5aIO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        25:54          Right, sure. Okay. But do you have, do you have any other questions about this?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            25:58          No, I'm, I'm okay with this.\cf0\cb0{\*\bkmkend Snippet - 79:43768&Admin%eTXHXCLeQR-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 109:43768&Admin%YnepVvaiU2-000¦}Interviewer:        26:01          [Snippet 109] Okay, cool. So we can look at the next one. Okay, so do you have any questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:10          \cf0\cb0{\*\bkmkstart Simple:43579&Admin%^JuCCPzfvX-000¦}{\*\bkmkstart Sure:43579&Admin%^c3qVins10-000¦}No. Should be pretty straightforward. Should be three.{\*\bkmkend Sure:43579&Admin%^c3qVins10-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Simple:43579&Admin%^JuCCPzfvX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:14          Okay. Um, yes it is three and I don't think I really have any questions to ask you about this one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:28          Mhmm\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:28          Did, did you have any concern about how the if-statement worked there?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            26:35          Yeah, because \cf0\cb0{\*\bkmkstart Previously Used:43579&Admin%^Hi2PIwBIr-000¦}{\*\bkmkstart Sure:43579&Admin%^kijdjk1UN-000¦}I use this a lot so I did not have a problem{\*\bkmkend Sure:43579&Admin%^kijdjk1UN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Previously Used:43579&Admin%^Hi2PIwBIr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  but {\*\bkmkstart Boolean Value of Integer:43579&Admin%^oZmp6RNxx-000¦}{\*\bkmkstart Potential Confusing Constructs:43579&Admin%^obekjxJdU-000¦}typically if I did not use it I would have thought about a second if this is a boolean value or not, does one or zero work or not, but yeah, I'm pretty sure that zero evaluates to false{\*\bkmkend Potential Confusing Constructs:43579&Admin%^obekjxJdU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Boolean Value of Integer:43579&Admin%^oZmp6RNxx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So I did not have a problem with this one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:53          Okay, great.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        26:54          Thank you. Actually let me write a couple things.\cf0\cb0{\*\bkmkend Snippet - 109:43768&Admin%YnepVvaiU2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 55:43768&Admin%AadxAClgp5-000¦}Interviewer:        27:19          [Snippet 55] Okay, let's take a look at this one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:22          Um, so again, full confidence. Um, yeah, any.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:27          No. This shouldn't this all \cf0\cb0{\*\bkmkstart Reason for Clarity:43579&Admin%^Mzx0Mvjp2-000¦}I'm pretty sure about because it will be evaluated and there are parentheses so I don't have to worry about which will take precedence.{\*\bkmkend Reason for Clarity:43579&Admin%^Mzx0Mvjp2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  This will be evaluated, this will be evaluated, they'll be multiplied and then. {\*\bkmkstart Precedence:43579&Admin%^E6cQDZqJp-000¦}So as this is a multiplication operator this will occur first and then this will be compared.{\*\bkmkend Precedence:43579&Admin%^E6cQDZqJp-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:47          I see. Yeah. Um, and\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:54          Okay. And so no questions about any of the things in here?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            27:56          No.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        27:58          Okay. Um, yeah, I don't really have any questions for you either. You answered it correctly and you worked out exactly correct.\cf0\cb0{\*\bkmkend Snippet - 55:43768&Admin%AadxAClgp5-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 71:43768&Admin%dj8GHHD3nj-000¦}Interviewer:        28:09         [Snippet 71] Um, so this one's slightly lower confidence, five. Um, do, do you have any questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            28:16          I would just like to see the output. Of course, if you have done it before, I'd like to know if this works. \cf0\cb0{\*\bkmkstart Questioning Program Validity:43579&Admin%^6hvZLIElF-000¦}If it compiles{\*\bkmkend Questioning Program Validity:43579&Admin%^6hvZLIElF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  yes it definitely should. Oh yeah. Now that I think about it if I want to give it more thought as to why I'm not confident about it. So this kind of stuff happens when you know you're compiling and the compiler manually sees this M1 it'll try to put one two. {\*\bkmkstart Correct Semantics:43741&Admin%^dstcAYMxi-000¦}{\*\bkmkstart Apparent Contradiction:43741&Admin%^BVaktTnwi-000¦The participant is correct that macro redefinition should result in a compiler error, however, that's exactly what's happening here, and they don't catch it. }So {\*\bkmkstart Macro Redefinition:43579&Admin%^Qai8njcg1-000¦}if at all there was a mention of M1 before this somewhere, this would have failed.{\*\bkmkend Macro Redefinition:43579&Admin%^Qai8njcg1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Apparent Contradiction:43741&Admin%^BVaktTnwi-000¦The participant is correct that macro redefinition should result in a compiler error, however, that's exactly what's happening here, and they don't catch it. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct Semantics:43741&Admin%^dstcAYMxi-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        28:42          I see. Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            28:43          So I'm pretty sure about that because you know, the compiler has not. \cf0\cb0{\*\bkmkstart Maintainability:43579&Admin%^Qes1c0drN-000¦}{\*\bkmkstart Social Context of Code:43741&Admin%^nbcEFj2aO-000¦}So yeah, {\*\bkmkstart Convention:43579&Admin%^5PPLIigQo-000¦}that is why we do the definitions before{\*\bkmkend Convention:43579&Admin%^5PPLIigQo-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  because you don't know where they might be used in the program and there is no restriction when it is an open code base, and you have multiple people, you know, getting at it and.{\*\bkmkend Social Context of Code:43741&Admin%^nbcEFj2aO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  {\*\bkmkstart Ambiguous Readability:43741&Admin%^fDLlnSASq-000¦}Yeah{\*\bkmkend Maintainability:43579&Admin%^Qes1c0drN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Would Have Written it Differently:43579&Admin%^HJl97ISyB-000¦}{\*\bkmkstart Emotional Aspect:43579&Admin%^TlyQZa1io-000¦}I'd like it to be at the top of the program{\*\bkmkend Emotional Aspect:43579&Admin%^TlyQZa1io-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  so that it is not ambiguous{\*\bkmkend Ambiguous Readability:43741&Admin%^fDLlnSASq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Would Have Written it Differently:43579&Admin%^HJl97ISyB-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , but otherwise, yeah, I{\*\bkmkstart Unsure:43579&Admin%^wzXklT3PH-000¦}{\*\bkmkstart Questioning Program Validity:43579&Admin%^s2XaZA8gO-000¦}{\*\bkmkstart Macro Redefinition:43579&Admin%^7plPLYZ4t-000¦} just am not confident about it in this aspect as to if the compiler is still okay with actually starting to pass the code and then hits a define just not confident with that{\*\bkmkend Macro Redefinition:43579&Admin%^7plPLYZ4t-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Questioning Program Validity:43579&Admin%^s2XaZA8gO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^wzXklT3PH-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        29:23          Um, so you mentioned that there's sort of different phases in which the compiler does different things, uh, do you know in which order? Um, the, the various things in this program happen.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            29:38          \cf0\cb0{\*\bkmkstart Partially Correct Semantics:43579&Admin%^bMMhr6C06-000¦}{\*\bkmkstart Remember:43581&Admin%^dGpbA9R7v-000¦}Uh, I do slightly remember. So the first one is where it defines uh, it finds the literals and then it will make a mapping table. And uh, before that there is a processing step where it removes the comments. And uh, I think that is when it does this kind of stuff, it removes these defines and it actually puts their real values in there. And then it makes the mapping table. So that's what I remember.{\*\bkmkend Partially Correct Semantics:43579&Admin%^bMMhr6C06-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43581&Admin%^dGpbA9R7v-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:03          Okay. So, um, after, after that happens, after these defines are removed, do you know what the state, what the program looks like at that point? This, this particular program\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:19          \cf0\cb0{\*\bkmkstart Correct Semantics:43579&Admin%^RiriNA7r4-000¦}M1s and M2s will no longer be there and the real values will be sitting in it, that's all. That's all that will matter.{\*\bkmkend Correct Semantics:43579&Admin%^RiriNA7r4-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:25          Um, so after the defines are removed, that's when you put a one instead of\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:31          \cf0\cb0{\*\bkmkstart Incorrect Semantics:43579&Admin%^2ytQcLGB7-000¦}{\*\bkmkstart Preprocessor in Statement Atom:43579&Admin%^RcZ7zAtUD-000¦}M1 and two instead of M2. Yeah, but depending on this condition where here V1 is less than V2. M1 would be one and M2 would be two{\*\bkmkend Preprocessor in Statement Atom:43579&Admin%^RcZ7zAtUD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43579&Admin%^2ytQcLGB7-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:40          Okay. Um, so which of these get selected is dependent on the if statement\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:47         \cf0\cb0{\*\bkmkstart Preprocessor in Statement Atom:43579&Admin%^ICknns7iV-000¦}{\*\bkmkstart Incorrect Semantics:43579&Admin%^01kUCpr9w-000¦} Yeah, if V1 which is one and V2 is two and one is less than two, hence this will be selected.{\*\bkmkend Incorrect Semantics:43579&Admin%^01kUCpr9w-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Preprocessor in Statement Atom:43579&Admin%^ICknns7iV-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        30:53          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            30:55          Oh yeah, well, this is nice because you know, \cf0\cb0{\*\bkmkstart Caught Own Mistake Before Prompted:43579&Admin%^tOxb1y5Kc-000¦}this will only be executed at runtime and this kind of decision cannot be made at that duration{\*\bkmkend Caught Own Mistake Before Prompted:43579&Admin%^tOxb1y5Kc-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So. Oh yeah. {\*\bkmkstart Attention:43579&Admin%^rnLp1CNst-000¦}{\*\bkmkstart Attribution of Confusion:43579&Admin%^8KH1nY6qP-000¦}Didn't give it that much thought{\*\bkmkend Attribution of Confusion:43579&Admin%^8KH1nY6qP-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attention:43579&Admin%^rnLp1CNst-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . Yeah. I don't know the should\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            31:11          this\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            31:13          either. I am wrong about when the defines are put in or this shouln't work.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        31:17          Right. Um, well I can tell you right off the bat, you're not wrong about when the defines happen. You're right. Um, but also this program does give it, does something. Yeah. Um, so you're also right that there is sort of this conflict that uh, the, if statement happens at run time and the defines happen at compile time. Um, but it turns out that um, the defines, are evaluated in order at compile time. So M1 is set to one M2 is set to two, but then also these are read as well.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Caught Own Mistake After Prompted:43741&Admin%^v7zPm32cU-000¦}Subject:            31:54          Oh, so M1 will actually be two and M1 will be one. And hence the output would be what I have\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:00          exactly\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:01          It's the opposite of what I've written\cf0\cb0{\*\bkmkend Caught Own Mistake After Prompted:43741&Admin%^v7zPm32cU-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:04          because they're overwritten.\par
\plain\fs26\cf0\cb0{\*\bkmkstart Remember:43741&Admin%^n8j5doxst-000¦}{\*\bkmkstart Convention:43741&Admin%^06JTQz8cO-000¦}\par
\plain\fs26 Subject:            32:05          Okay. And hence \cf0\cb0{\*\bkmkstart Snippet Value Judgement:43579&Admin%^8ye8HxIOa-000¦}they, should not be written in between a program I believe{\*\bkmkend Snippet Value Judgement:43579&Admin%^8ye8HxIOa-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  because you know, I,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:12          if you're going to try to write a clear, understandable program, you should not write a program like this\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:18          just definitely now I remember, yes.\cf0\cb0{\*\bkmkend Convention:43741&Admin%^06JTQz8cO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Remember:43741&Admin%^n8j5doxst-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:20          But that is not the point of my study.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:21          Of course. Yeah. But yeah, it makes sense. Yes. \cf0\cb0{\*\bkmkstart Quote:43741&Admin%^foDkJgQeQ-000¦}So yeah, {\*\bkmkstart Convention:43579&Admin%^91gls4NIw-000¦}{\*\bkmkstart Preprocessor in Statement Atom:43579&Admin%^nNldzUdBA-000¦}I stick to what I know. That's why I keep them at the top.{\*\bkmkend Preprocessor in Statement Atom:43579&Admin%^nNldzUdBA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Convention:43579&Admin%^91gls4NIw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Quote:43741&Admin%^foDkJgQeQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:27          Yeah. You're much less likely to make mistakes if you do that.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:31          But yeah, I'm glad I did not know that if it encounters any more in the way it really just keep updating them.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:38          Yeah, it just overwrites them. So, um, any more questions about this?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:43          No I'm good at this.\cf0\cb0{\*\bkmkend Snippet - 71:43768&Admin%dj8GHHD3nj-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 62:43768&Admin%OxNpxFi8iG-000¦}Interviewer:        32:43          [Snippet 62] Okay, great. And then move on the next one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            32:52          \cf0\cb0{\*\bkmkstart Simple:43741&Admin%^L8cEFfqOY-000¦}Okay. This one is also pretty forward, straight forward. Yeah, I stick to these answers.{\*\bkmkend Simple:43741&Admin%^L8cEFfqOY-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        32:58          Yeah. You gave full confidence. Um, and you seem to understand it. Um, you made one comment I think\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            33:07          Yeah, \cf0\cb0{\*\bkmkstart Uninitialized:43579&Admin%^ZsbVjdh2I-000¦}{\*\bkmkstart Example Problem:43741&Admin%^72hHHyXwL-000¦}{\*\bkmkstart Emotional Aspect:43579&Admin%^5dnRokKu6-000¦}I would have like it if they were initialized upfront here{\*\bkmkend Emotional Aspect:43579&Admin%^5dnRokKu6-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  because you know, in a bigger program that is, that {\*\bkmkstart Potential Confusing Constructs:43579&Admin%^SKacBgPJx-000¦}you start using them and you forget to initialize them. So that might be a chance that you might end up with some junk values{\*\bkmkend Potential Confusing Constructs:43579&Admin%^SKacBgPJx-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .{\*\bkmkend Example Problem:43741&Admin%^72hHHyXwL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Uninitialized:43579&Admin%^ZsbVjdh2I-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  But here we have so.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        33:19          Okay. Yeah. So, um, you're saying that if they weren't initialized with your problem, but there's no problem in this particular,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            33:27          Yes, there is no problem in this one.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        33:30          Okay, I agree. There's no problem in this one. If your answer is great. \cf0\cb0{\*\bkmkend Snippet - 62:43768&Admin%OxNpxFi8iG-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt Cool. Thanks.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 49:43768&Admin%53lSPQKPd9-000¦}Interviewer:        33:37          [Snippet 49] Okay. So this one was a little bit more interesting. Um, and again, a five confidence.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            33:43          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        33:43          So, um, do you have any questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43771&Admin%umEEZDz85y-000¦}Subject:            33:46          My question would be very simple, like I know a ternary operator needs a kind of a condition here which will then be evaluated and depending on the true or false will be doing the assignment. So in this context, when I see it, {\*\bkmkstart Correct for Wrong Reasons:43579&Admin%^wDg4QyOOT-000¦}I know that, you know there's, and {\*\bkmkstart Incorrect Semantics:43579&Admin%^zbKB9Nxm7-000¦}{\*\bkmkstart Logical Operator Must Be in Condition:43579&Admin%^NVvGbDQVB-000¦}a double equal-to can only be there for the condition{\*\bkmkend Logical Operator Must Be in Condition:43579&Admin%^NVvGbDQVB-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43579&Admin%^zbKB9Nxm7-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  check. {\*\bkmkstart Parenthesis:43741&Admin%^u1BDFFYNo-000¦}{\*\bkmkstart Ambiguous Readability:43741&Admin%^hk8F71sNm-000¦}So I know that V1 is being compared to three{\*\bkmkend Correct for Wrong Reasons:43579&Admin%^wDg4QyOOT-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , {\*\bkmkstart Would Have Written it Differently:43579&Admin%^8jP3aNCZC-000¦}but{\*\bkmkstart Reason for Clarity:43579&Admin%^XRpcU80Zh-000¦} I'd have been a lot more confident if there was parentheses{\*\bkmkend Would Have Written it Differently:43579&Admin%^8jP3aNCZC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , which is either separating all of this and, you know, a right side and left side so that it is very clear that V2 is going to be assigned to some value. It would have been much, you know it would have been very clear and very easy on my eyes. I can just parse through that and I get the answer.{\*\bkmkend Reason for Clarity:43579&Admin%^XRpcU80Zh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Ambiguous Readability:43741&Admin%^hk8F71sNm-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Parenthesis:43741&Admin%^u1BDFFYNo-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  I'm pretty confident that this is the answer.{\*\bkmkend Discussion Question:43771&Admin%umEEZDz85y-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        34:29          I see. So, um, well you sort of went back and forth the first time you answered it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            34:36          \cf0\cb0{\*\bkmkstart Attention:43741&Admin%^XRK7JsNhD-000¦}{\*\bkmkstart Multiple Possible Semantics:43741&Admin%^mjAk2ylD8-000¦}{\*\bkmkstart Correct for Wrong Reasons:43741&Admin%^mkuCfcDxh-000¦}Yeah, because I did not see {\*\bkmkstart Visual Reference:43579&Admin%^9lfvog6wK-000¦== }this{\*\bkmkend Visual Reference:43579&Admin%^9lfvog6wK-000¦== }\li0\fi0\ri0\sb0\sa0\ql\vertalt . I didn't give it a lot of thought, so I put my parentheses {\*\bkmkstart Visual Reference:43579&Admin%^5wEixk9GS-000¦around (3 ? 2 : 4) }here{\*\bkmkend Visual Reference:43579&Admin%^5wEixk9GS-000¦around (3 ? 2 : 4) }\li0\fi0\ri0\sb0\sa0\ql\vertalt  assuming that {\*\bkmkstart Visual Reference:43579&Admin%^dBHfup52E-000¦3 }this{\*\bkmkend Visual Reference:43579&Admin%^dBHfup52E-000¦3 }\li0\fi0\ri0\sb0\sa0\ql\vertalt  is just the condition, but then I realized it's a double equal to and it cannot, {\*\bkmkstart Logical Operator Must Be in Condition:43579&Admin%^DT4hXv7gN-000¦}it cannot be there for any other reason but for a condition{\*\bkmkend Logical Operator Must Be in Condition:43579&Admin%^DT4hXv7gN-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , like I said, it would have been much simpler if I had seen the parentheses.{\*\bkmkend Correct for Wrong Reasons:43741&Admin%^mkuCfcDxh-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Multiple Possible Semantics:43741&Admin%^mjAk2ylD8-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Attention:43741&Admin%^XRK7JsNhD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        34:53          So, um, the way that you figured out that um, this is the correct way to parse it, that that's the right way to put the imaginary parentheses. You sort of did that by, um like logic or\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            35:08          by logic that this cannot. Yeah, this is not, you know, \cf0\cb0{\*\bkmkstart Correct for Wrong Reasons:43579&Admin%^IbvmjVucs-000¦}{\*\bkmkstart Inferring Semantics from Reasoning:43579&Admin%^gPIMR6Al7-000¦}this cannot be evaluated in any other sense that a comparison. So I know that this left and right should be together{\*\bkmkend Inferring Semantics from Reasoning:43579&Admin%^gPIMR6Al7-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Correct for Wrong Reasons:43579&Admin%^IbvmjVucs-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and if they are together, that means they are a condition and that condition is what is going to decide the fate of which will be assigned to V2.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        35:27         \cf0\cb0{\*\bkmkstart Counterfactual Semantics:43741&Admin%^0LfQaCyGd-000¦}{\*\bkmkstart Incorrect Semantics:43741&Admin%^RxEeYoqrv-000¦}{\*\bkmkstart Correct for Wrong Reasons:43741&Admin%^LpFR1jM05-000¦The participant was unsure how to parse the expression. They chose the correct parse, based on faulty logic that the other viable precedence rules wouldn't make sense semantically, which is incorrect. Had they understood the semantics of the other nesting of operators perhaps they would have gotten this question wrong. } Okay, cool. Um, so if the way that you had written it originally was that the parentheses were around the three question mark two [3 ? 2 : 4], so if it had been written that way, if it had been written with the parentheses around, um,\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            35:44          it wouldn't have compiled\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        35:47          it wouldn't have compiled. Why? What, what is that error? What, what would've been the error that\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            35:50          if said something like, you know, this symbol here cannot, you ended up said something like a can't compare to, you know, here, nothing is okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:02          {\*\bkmkstart Logical Operator Must Be in Condition:43579&Admin%^QlH8LiXAX-000¦== doesn't evaluate to a value }Nothing comes out of this{\*\bkmkend Logical Operator Must Be in Condition:43579&Admin%^QlH8LiXAX-000¦== doesn't evaluate to a value }\li0\fi0\ri0\sb0\sa0\ql\vertalt . I think you could have had the same ambiguity that I have as to, you know, I think that would be a problem in creating the parse tree and it would definitely hit this one first so it will throw an error saying it does not know what to compare to it or something of that sort. \cf0\cb0{\*\bkmkstart Unsure:43579&Admin%^cZAMu5rKX-000¦}I'm not too sure about it{\*\bkmkend Unsure:43579&Admin%^cZAMu5rKX-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  but this would be encountered first and.{\*\bkmkend Correct for Wrong Reasons:43741&Admin%^LpFR1jM05-000¦The participant was unsure how to parse the expression. They chose the correct parse, based on faulty logic that the other viable precedence rules wouldn't make sense semantically, which is incorrect. Had they understood the semantics of the other nesting of operators perhaps they would have gotten this question wrong. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43741&Admin%^RxEeYoqrv-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Counterfactual Semantics:43741&Admin%^0LfQaCyGd-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:24          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        36:25          So what, what are the two things that can't be compared in that scenario?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            36:33          Uh, okay. So if I though okay. V1 double equals three two 4. Okay. \cf0\cb0{\*\bkmkstart Correct Semantics:43579&Admin%^4Io9qsITZ-000¦}Actually, if this happens and I want to make it work, then I picked three is true and two is the answer, two is not. Yeah. Okay. So what happens then according to me, is if at all this was the parentheses, two would have been picked V1 double equals two. That is going to be checked. And it is not{\*\bkmkend Correct Semantics:43579&Admin%^4Io9qsITZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Unsure:43579&Admin%^nAmw9Xv4P-000¦}{\*\bkmkstart Logical Operator Must Be in Condition:43579&Admin%^UIASQdrKQ-000¦}And, it doesn't know what to assign to V2. I'm not too sure if zero will be assigned to it. Like I don't know what would be the return type of this condition of this.{\*\bkmkend Logical Operator Must Be in Condition:43579&Admin%^UIASQdrKQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^nAmw9Xv4P-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        37:14          I see, okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            37:18          {\*\bkmkstart Inferring Semantics from Reasoning:43579&Admin%^ZhowQvLIj-000¦In this case, the participant believes that the process of parsing must also include semantic analysis to help resolve the correct parse tree. Only if operators have correct types can they parse in a particular way. }So hence it has to be the other way around.{\*\bkmkend Inferring Semantics from Reasoning:43579&Admin%^ZhowQvLIj-000¦In this case, the participant believes that the process of parsing must also include semantic analysis to help resolve the correct parse tree. Only if operators have correct types can they parse in a particular way. }\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        37:20          I see. Okay. So it turns out that it would be zero in that case. If you have a statement, one equals equals two. It actually will provide a value of zero or one depending on whether or not it's true. That said, even though that's true. Um, you got the correct answer because, um, the, the imaginary parentheses you would write around this, the way that it parses actually is the way that you figured out eventually where um V1 equals equals three is the condition of the ternary operator. Um, so it could have worked the other way with the parentheses around the three question mark or whatever, but it doesn't because um the precedence of the equals equals binds tighter than the, than the ternary. All right. Um, so yeah, you got this one. Right.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            38:17          Okay, great.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        38:18          Do you have any other questions about this one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            38:20          Uh, no. Uh, I just say it's always, \cf0\cb0{\*\bkmkstart Design Concerns:43579&Admin%^B8sDFxmfS-000¦}{\*\bkmkstart Conditional Operator Atom:43579&Admin%^SDhAcfJm1-000¦}{\*\bkmkstart Maintainability:43579&Admin%^tGRCCM2LT-000¦}{\*\bkmkstart Social Context of Code:43579&Admin%^TTxSsYEaK-000¦}{\*\bkmkstart Snippet Value Judgement:43579&Admin%^1ZRDLxSCE-000¦}you know, this saves space, but you need, has to be used in such a way that, you know, it is not difficult for anybody who's reading the program for it should not be something that I have to sit down and figure because we are just saving some space and making it compact. We have to make it clear in the sense if I do it in a, uh, {\*\bkmkstart Emotional Aspect:43579&Admin%^KHeasXufr-000¦}{\*\bkmkstart Would Have Written it Differently:43579&Admin%^4MBVb9bf2-000¦}if I do it at my workplace, I not be happy if somebody leaves this to me.{\*\bkmkend Would Have Written it Differently:43579&Admin%^4MBVb9bf2-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Emotional Aspect:43579&Admin%^KHeasXufr-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet Value Judgement:43579&Admin%^1ZRDLxSCE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Social Context of Code:43579&Admin%^TTxSsYEaK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Maintainability:43579&Admin%^tGRCCM2LT-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Conditional Operator Atom:43579&Admin%^SDhAcfJm1-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Design Concerns:43579&Admin%^B8sDFxmfS-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        38:45          Right. Yeah. That's certainly true. Okay, cool. Thank you. And I'm not going to make the same mistake last time. We have two more, not one more. Okay. Okay.\cf0\cb0{\*\bkmkend Snippet - 49:43768&Admin%53lSPQKPd9-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 91:43768&Admin%CgkpQCO6HE-000¦}Subject:            38:59          {\*\bkmkstart Relying on Correctness of Example:43741&Admin%^16azsmEvl-000¦}[Snippet 91] Well, yeah, this one, this,{\*\bkmkstart Unsure:43579&Admin%^OIy7rSkQI-000¦}{\*\bkmkstart Not Previously Written:43579&Admin%^Fbn9OEcka-000¦} I'm not too confident because{\*\bkmkstart Unfamiliar Syntax:43587&Admin%^EHLPoMfwA-000¦} I have not ever worked. I have not used this ever{\*\bkmkend Not Previously Written:43579&Admin%^Fbn9OEcka-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^OIy7rSkQI-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , but as this compiles, like you say, this should be a yeah, {\*\bkmkstart Previously Seen:43579&Admin%^OJqzk9NIs-000¦}this kind of notation I have seen before{\*\bkmkend Previously Seen:43579&Admin%^OJqzk9NIs-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  and {\*\bkmkstart Previously Used:43579&Admin%^SE4tkCO7D-000¦}I have checked on ints with a base pointer{\*\bkmkend Previously Used:43579&Admin%^SE4tkCO7D-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unfamiliar Syntax:43587&Admin%^EHLPoMfwA-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Correct Semantics:43579&Admin%^qiDeiQjb4-000¦}So if my understanding is right, it should still return whatever it is at the second index, that is E.{\*\bkmkend Correct Semantics:43579&Admin%^qiDeiQjb4-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Relying on Correctness of Example:43741&Admin%^16azsmEvl-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        39:23          Yeah. Um, so that, that description all makes sense to me. Um, you did put a confidence of four though. Um, so can you just explain, um, I think that's the lowest confidence you put in the whole.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            39:39          Yeah. Because you know, uh, these, the string here and if I do this, I should be ending up with this according to my understanding, but \cf0\cb0{\*\bkmkstart Strings as Pointers/Arrays:43579&Admin%^2mVVCGUKw-000¦}{\*\bkmkstart Incorrect Semantics:43579&Admin%^ohq4Ej1do-000¦}{\*\bkmkstart Unsure:43579&Admin%^BgGB0hAoF-000¦}this is not a base pointer, but I do understand it's a string and {\*\bkmkstart Potential Confusing Constructs:43741&Admin%^kCRT0jLbq-000¦}I'm really shaky when it comes to strings in C{\*\bkmkend Unsure:43579&Admin%^BgGB0hAoF-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Incorrect Semantics:43579&Admin%^ohq4Ej1do-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Strings as Pointers/Arrays:43579&Admin%^2mVVCGUKw-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . {\*\bkmkstart Language Value Judgement:43579&Admin%^ybRUgZVmO-000¦}I don't think about them too much because I think that data type is not actually meant for the language{\*\bkmkend Language Value Judgement:43579&Admin%^ybRUgZVmO-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . So yeah, that's why I'm not confident about this.{\*\bkmkend Potential Confusing Constructs:43741&Admin%^kCRT0jLbq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:09          Okay. So, um, it has nothing to do with, um, with the brackets or the, the two. It's just about the string.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:18          Okay.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:19          Um, that I was asking you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:20          Oh, for me?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:21          Yeah, for you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:22          Well, yeah, the way it is written. See if it were just a simple assignment with the char star. I know you see regular defines, right, if I have seen something like this, where \cf0\cb0{\*\bkmkstart Previously Seen:43579&Admin%^NvB4NJOzD-000¦}I have typically seen strings being assigned to char pointers that is okay with me. That is all I know about how I deal with strings in C{\*\bkmkend Previously Seen:43579&Admin%^NvB4NJOzD-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:40          Sure.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            40:40          \cf0\cb0{\*\bkmkstart Unsure:43579&Admin%^eLkJYybk3-000¦}{\*\bkmkstart Quote:43579&Admin%^ioRkHephH-000¦}So when I see anything different I'm not too confident about it because I haven't done it before and I'm not comfortable with strings and see in any other fashion than what I have already seen{\*\bkmkend Quote:43579&Admin%^ioRkHephH-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^eLkJYybk3-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt .\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        40:51          I see. Okay. Um, but so then my question to you was giving that answer, I feel like you justified that, but um, but you're, you're not confused by the two and the brackets.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Not Previously Seen:43741&Admin%^ChNR3Qtob-000¦}{\*\bkmkstart Previously Seen:43741&Admin%^3Ksx08NzC-000¦}{\*\bkmkstart Non-standard terminology:43741&Admin%^NnzesYDAH-000¦"Declaration", when probably they mean initialization, but actually expression. }Subject:            41:03          I am not because I have seen that kind of declaration before, but not with strings.{\*\bkmkend Non-standard terminology:43741&Admin%^NnzesYDAH-000¦"Declaration", when probably they mean initialization, but actually expression. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Previously Seen:43741&Admin%^3Ksx08NzC-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Not Previously Seen:43741&Admin%^ChNR3Qtob-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:07          Gotcha. Perfect. Okay. Um, well in that case, uh, the way that you described it originally was perfect. So what I, what I can describe for you is what the deal is with the strings, just for your own sake.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:23          Yes, yes, that'd be great.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:26          Um, so the, the way that, um, strings work in C is yeah, they're represented as char stars, so they're a pointer to a character. Um, and if you're familiar with how arrays work, arrays are just sequential elements in memory which are pointed to just the first element. So an array is a pointer to the first element in continuous elements\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            41:50          Incremented by the size of the char pointer.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        41:51          Right, exactly. And so strings are the same thing, strings are just a bunch of characters next to each other in memory. And um a char star, is just a pointer to the first element. So this string literal is just those characters next to each other in memory and a pointer to the first one. So you've got that pointer the first one, that's what's returned by the string literal, a pointer to the first element, which is equivalent to an array of characters. And so when you index into the second one, it just adds to the pointer and then it looks up. The value two elements, err three elements ahead.\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Discussion Question:43773&Admin%DOLTrgErzK-000¦}Subject:            42:27          Okay. Just one more thing about that is uh, I have a lot of, uh, you know, I don't, {\*\bkmkstart Unsure:43579&Admin%^aiBvlp5fu-000¦}{\*\bkmkstart Memory Management:43579&Admin%^RAU8IXqNQ-000¦}I'm not too comfortable about memory and C{\*\bkmkend Memory Management:43579&Admin%^RAU8IXqNQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Unsure:43579&Admin%^aiBvlp5fu-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , so if I just drag something like this, if at all this was in memory, you know, the sitting like this q, w, e, r, t y. So where was the memory assigned or allocated for this? If I start talking about it like this this, you know? Where was the memory dedicated for this.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        42:52          Like where, where in all of the memory?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            42:55          No, no, not read exactly in this code. I do not see it being referenced anytime before and I have just mentioned it here and um, I'm trying to access the second index of this so I don't understand where was that, where exactly did C find the time to assign or allocate memory to this?\cf0\cb0{\*\bkmkend Discussion Question:43773&Admin%DOLTrgErzK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        43:14          Yeah, that's a great question. Um, so you know how in the earlier question with the um, defines uh, we were talking about the multiple steps that compiler takes. Um, and you had actually mentioned that one of the steps that a compiler takes is to first look up all the literal values. So what C does is every time, but before it gets to run time during compilation, it finds all the literals and there's a whole section of memory just for literal values that get allocated in the byte code itself before execution. Um, so by the time this starts running, this literal value has already been replaced with a pointer to pre allocated memory. Um, it's, I think called the bss section of memory. It's kind of neither here nor there, but um, but so it doesn't go on the heap, um, or technically on the stack. I think it's pre allocated memory that every time the program runs it's already there.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            44:20          So that's typically where the code itself is also sitting. Are you talking about that memory? You know, it has to store some metadata about the program, like the literal symbol table.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        44:30          Exactly right\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            44:32          It's not memory space but it is the space which is used in memory for storing the program and related to that is where put this is\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        44:42          Because it's a literal constant. So it's guaranteed not to change for the rest of the program. Yeah. So that's where it lives.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        44:51          Okay, great. Um, cool. Any other questions?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            44:56          No, no, that will be all.\cf0\cb0{\*\bkmkend Snippet - 91:43768&Admin%CgkpQCO6HE-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26\cf0\cb0{\*\bkmkstart Snippet - 56:43768&Admin%E6RUyQ3u7u-000¦}Interviewer:        44:56          [Snippet 56] Okay. And then now, now the last one. Six confidence? Yeah. Any, any questions about this piece of code?\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:05          Mm. Mm.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:07          V2 is also greater than. \cf0\cb0{\*\bkmkstart Short-circuiting:43579&Admin%^bZVbryPUK-000¦}{\*\bkmkstart Apparent Contradiction:43579&Admin%^hagQqPcLF-000¦Obeyed short-circuiting in this example, however did not in the previous example. }Oh yeah. I actually, yeah, this was true and I didn't care about the other one, but I should have given our discussion about how or checks for both of these ways.{\*\bkmkend Apparent Contradiction:43579&Admin%^hagQqPcLF-000¦Obeyed short-circuiting in this example, however did not in the previous example. }\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Short-circuiting:43579&Admin%^bZVbryPUK-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:18          Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:19          So yeah, my question to you. When one is true, obviously I need to go and check if the second one is. Yeah, I don't need to. If one is true, I can actually just go inside any of it. So that is what happens with this right? With an or.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:32          Yeah. With\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:33          Yeah. If it is false. Yeah, that's one of them is true. I don't have to check the other day\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:37          for, for an or that's true for an and it's the opposite.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:41          Yeah. And it's opposite. Yeah, that is what my point was. I did that. So\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:47          I think you actually said that when you evaluated this, you said yes it short circuits. I don't need to.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:51          Yes. Yes. So yeah. Yeah.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        45:53          Yeah, so I actually thought that was interesting because it's the opposite of what you said.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            45:57          Yeah, in the first one, right? Yeah, I just thought, you know, \cf0\cb0{\*\bkmkstart Attention:43579&Admin%^Tm6DUcu2J-000¦}I didn't give it a lot of thought in the sense of with and what would happen if I'd have seen an and as part maybe I would've thought harder{\*\bkmkend Attention:43579&Admin%^Tm6DUcu2J-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt , but yeah,{\*\bkmkstart Remember:43581&Admin%^ISm9VqEQB-000¦} I do remember some. Something like that happening. {\*\bkmkstart Evaluation Order:43579&Admin%^vVo58tfRf-000¦}And I always get confused with, I don't know if it is Java or C plus plus or something that the evaluation actually has happens from the left to right.{\*\bkmkend Evaluation Order:43579&Admin%^vVo58tfRf-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt  I don't know if it happens any where or is it just my memories.{\*\bkmkend Remember:43581&Admin%^ISm9VqEQB-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        46:23          Hold on a sec, I have a question. You said left to right, but with your hand you\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            46:26          Oh, move from right to left. Did I? Yes. So yeah, right to left.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        46:31          Okay. So some language goes right to left\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            46:33          \cf0\cb0{\*\bkmkstart Evaluation Order:43579&Admin%^AzJwRlaiq-000¦}{\*\bkmkstart Unsure:43579&Admin%^DLYQt6vbR-000¦}is what I have a very big doubt on and I don't know which one and I'm always confused when I come to these boolean conditions where you know, I have to see which one. If you actually asked me which one would have been executed first, I would have taken a minute to say that. Okay. It would be this one first and then it would move. {\*\bkmkstart Contrasting different languages:43741&Admin%^foDKCXJQL-000¦}I don't know if it moves from left to right. C, I know it moves from left to right, but I think there is some language which moves from right to left. I might be very wrong. I don't know.{\*\bkmkend Unsure:43579&Admin%^DLYQt6vbR-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Evaluation Order:43579&Admin%^AzJwRlaiq-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Contrasting different languages:43741&Admin%^foDKCXJQL-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:01          Okay. I can't think of any off the top of my head that go right to left, but I'm sure it exists.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            47:08          I don't know I'll let you know if I do find that.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:10          Well if you do, I'd love to hear about it.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            47:12          \cf0\cb0{\*\bkmkstart Java:43741&Admin%^TAMeNOQlQ-000¦}Well, it's not maybe because it's not even Java. I don't know why it's just. Maybe you know. I did read it as left to right and I did the same wrong thing that I do. Maybe it stuck with me and that's a doubt. So yeah.{\*\bkmkend Java:43741&Admin%^TAMeNOQlQ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:24          It could be.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            47:24          We got that out of our way now.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:26          Okay. So one, one last question for you.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:30          This one you read, right. You did it right. By the way your answer is right. Um, can you think of why you didn't have the same thought process on the previous one? Why you got it right? You knew it here and you didn't there.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            47:44          Can we at the other one?\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:46          Yeah, I'll try to find it. I forget what number it is\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            47:54          Might be one of the first ones.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:56          Yeah, I think it is.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        47:59          \cf0\cb0{\*\bkmkstart Snippet - 79:43768&Admin%AhkCgNmueK-000¦Referenced other snippet while discussing this one }Okay. Yeah. So it's question 79. Program sample seventy nine. Huh.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            48:04          {\*\bkmkstart Attention:43579&Admin%^2daGeo13b-000¦Attention was shifted from the || to the ++. Distracted focus. }\cf0\cb0{\*\bkmkstart Cognitive Load:43741&Admin%^TDmbQz1es-000¦}So my thought process was more around the operator than the condition{\*\bkmkend Attention:43579&Admin%^2daGeo13b-000¦Attention was shifted from the || to the ++. Distracted focus. }\li0\fi0\ri0\sb0\sa0\ql\vertalt . Hence I missed that evaluation during the first glance that I gave it. And I obviously did not spend too much time thinking about it. Hence you know I didn't get into that, but here it was I was pretty confident about how this would result in. So I was giving more thought about which would evaluated and which would not be. So yeah, if I see. {\*\bkmkstart Recurring Problem:43579&Admin%^SFTS7P30v-000¦}Yes, this kind of operators always get me a little worked up{\*\bkmkend Recurring Problem:43579&Admin%^SFTS7P30v-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt . I start giving them a lot of importance.{\*\bkmkend Cognitive Load:43741&Admin%^TDmbQz1es-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt{\*\bkmkend Snippet - 79:43768&Admin%AhkCgNmueK-000¦Referenced other snippet while discussing this one }\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        48:34          I see,\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        48:43          okay. That, that makes a lot of sense. There's a lot of research that says like, um, the more things you're focusing on cognitively, you're more likely to forget other things. So if you were focusing on the plus plus it makes a lot of sense that you might not have\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            48:57          I did not, it slipped out of my mind. Yes.\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        48:59          Okay. Um, but that, that's great to hear about. Um, so do, do you have any more questions about anything we've seen so far? Cus.\par
\pard\plain\plain\fs26\par
\plain\fs26 Subject:            49:08          I'm pretty. Yeah. I'm, I'm happy with how you have covered everything. So I'm great.\cf0\cb0{\*\bkmkend Snippet - 56:43768&Admin%E6RUyQ3u7u-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
\pard\plain\plain\fs26\par
\plain\fs26 Interviewer:        49:12          Okay. Excellent. Um, in that case, I will stop the audio recording. Um, and I can sort of give you.\cf0\cb0{\*\bkmkend Section - Discussion:43748&Admin%^ffdQr6OSZ-000¦}\li0\fi0\ri0\sb0\sa0\ql\vertalt\par
}}